"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireDefault(require("react"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var _hotkeysJs = _interopRequireDefault(require("hotkeys-js"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var ReactHotkeys = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2.default)(ReactHotkeys, _React$Component);

  var _super = _createSuper(ReactHotkeys);

  function ReactHotkeys(props) {
    var _this;

    (0, _classCallCheck2.default)(this, ReactHotkeys);
    _this = _super.call(this, props);
    _this.isKeyDown = false;
    _this.handle = void 0;
    _this.onKeyDown = _this.onKeyDown.bind((0, _assertThisInitialized2.default)(_this));
    _this.onKeyUp = _this.onKeyUp.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleKeyUpEvent = _this.handleKeyUpEvent.bind((0, _assertThisInitialized2.default)(_this));
    _this.handle = {};
    return _this;
  }

  (0, _createClass2.default)(ReactHotkeys, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
          filter = _this$props.filter,
          splitKey = _this$props.splitKey;

      if (filter) {
        _hotkeysJs.default.filter = filter;
      }

      _hotkeysJs.default.unbind(this.props.keyName);

      (0, _hotkeysJs.default)(this.props.keyName, {
        splitKey: splitKey
      }, this.onKeyDown);
      document && document.body.addEventListener('keyup', this.handleKeyUpEvent);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      _hotkeysJs.default.unbind(this.props.keyName);

      this.isKeyDown = true;
      this.handle = {};
      document && document.body.removeEventListener('keyup', this.handleKeyUpEvent);
    }
  }, {
    key: "onKeyUp",
    value: function onKeyUp(e, handle) {
      var _this$props2 = this.props,
          onKeyUp = _this$props2.onKeyUp,
          disabled = _this$props2.disabled;
      !disabled && onKeyUp && onKeyUp(handle.shortcut, e, handle);
    }
  }, {
    key: "onKeyDown",
    value: function onKeyDown(e, handle) {
      var _this$props3 = this.props,
          onKeyDown = _this$props3.onKeyDown,
          allowRepeat = _this$props3.allowRepeat,
          disabled = _this$props3.disabled;
      if (this.isKeyDown && !allowRepeat) return;
      this.isKeyDown = true;
      this.handle = handle;
      !disabled && onKeyDown && onKeyDown(handle.shortcut, e, handle);
    }
  }, {
    key: "handleKeyUpEvent",
    value: function handleKeyUpEvent(e) {
      if (!this.isKeyDown) return;
      this.isKeyDown = false;
      if (this.props.keyName && this.props.keyName.indexOf(this.handle.shortcut) < 0) return;
      this.onKeyUp(e, this.handle);
      this.handle = {};
    }
  }, {
    key: "render",
    value: function render() {
      return this.props.children || null;
    }
  }]);
  return ReactHotkeys;
}(_react.default.Component);

exports.default = ReactHotkeys;
ReactHotkeys.defaultProps = {
  filter: function filter(event) {
    var target = event.target || event.srcElement;
    var tagName = target.tagName;
    return !(target.isContentEditable || tagName === 'INPUT' || tagName === 'SELECT' || tagName === 'TEXTAREA');
  }
};
ReactHotkeys.propTypes = {
  keyName: PropTypes.string,
  filter: PropTypes.func,
  onKeyDown: PropTypes.func,
  onKeyUp: PropTypes.func,
  disabled: PropTypes.bool,
  splitKey: PropTypes.string
};
module.exports = exports.default; 
//# sourceMappingURL=index.js.map