import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React from 'react';
import * as PropTypes from 'prop-types';
import Hotkeys from 'hotkeys-js';

var ReactHotkeys = /*#__PURE__*/function (_React$Component) {
  _inherits(ReactHotkeys, _React$Component);

  var _super = _createSuper(ReactHotkeys);

  function ReactHotkeys(props) {
    var _this;

    _classCallCheck(this, ReactHotkeys);

    _this = _super.call(this, props);
    _this.isKeyDown = false;
    _this.handle = void 0;
    _this.onKeyDown = _this.onKeyDown.bind(_assertThisInitialized(_this));
    _this.onKeyUp = _this.onKeyUp.bind(_assertThisInitialized(_this));
    _this.handleKeyUpEvent = _this.handleKeyUpEvent.bind(_assertThisInitialized(_this));
    _this.handle = {};
    return _this;
  }

  _createClass(ReactHotkeys, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
          filter = _this$props.filter,
          splitKey = _this$props.splitKey;

      if (filter) {
        Hotkeys.filter = filter;
      }

      Hotkeys.unbind(this.props.keyName);
      Hotkeys(this.props.keyName, {
        splitKey: splitKey
      }, this.onKeyDown);
      document && document.body.addEventListener('keyup', this.handleKeyUpEvent);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      Hotkeys.unbind(this.props.keyName);
      this.isKeyDown = true;
      this.handle = {};
      document && document.body.removeEventListener('keyup', this.handleKeyUpEvent);
    }
  }, {
    key: "onKeyUp",
    value: function onKeyUp(e, handle) {
      var _this$props2 = this.props,
          onKeyUp = _this$props2.onKeyUp,
          disabled = _this$props2.disabled;
      !disabled && onKeyUp && onKeyUp(handle.shortcut, e, handle);
    }
  }, {
    key: "onKeyDown",
    value: function onKeyDown(e, handle) {
      var _this$props3 = this.props,
          onKeyDown = _this$props3.onKeyDown,
          allowRepeat = _this$props3.allowRepeat,
          disabled = _this$props3.disabled;
      if (this.isKeyDown && !allowRepeat) return;
      this.isKeyDown = true;
      this.handle = handle;
      !disabled && onKeyDown && onKeyDown(handle.shortcut, e, handle);
    }
  }, {
    key: "handleKeyUpEvent",
    value: function handleKeyUpEvent(e) {
      if (!this.isKeyDown) return;
      this.isKeyDown = false;
      if (this.props.keyName && this.props.keyName.indexOf(this.handle.shortcut) < 0) return;
      this.onKeyUp(e, this.handle);
      this.handle = {};
    }
  }, {
    key: "render",
    value: function render() {
      return this.props.children || null;
    }
  }]);

  return ReactHotkeys;
}(React.Component);

ReactHotkeys.defaultProps = {
  filter: function filter(event) {
    var target = event.target || event.srcElement;
    var tagName = target.tagName;
    return !(target.isContentEditable || tagName === 'INPUT' || tagName === 'SELECT' || tagName === 'TEXTAREA');
  }
};
ReactHotkeys.propTypes = {
  keyName: PropTypes.string,
  filter: PropTypes.func,
  onKeyDown: PropTypes.func,
  onKeyUp: PropTypes.func,
  disabled: PropTypes.bool,
  splitKey: PropTypes.string
};
export { ReactHotkeys as default }; 
//# sourceMappingURL=index.js.map