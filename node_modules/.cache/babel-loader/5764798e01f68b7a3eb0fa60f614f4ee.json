{"ast":null,"code":"var _jsxFileName = \"E:\\\\Web Dev\\\\React\\\\RoomEase\\\\RoomEase-FrontEnd\\\\src\\\\containers\\\\Tasks\\\\EditTask\\\\EditTask.js\";\nimport React, { Component } from 'react';\nimport Axios from 'axios';\nimport { TASK_URL, MEMBERS_OF_ROOM_URL } from '../../../constants/ServerRoutes';\nimport { connect } from 'react-redux';\nimport TextInput from '../../../components/inputs/TextInput';\nimport * as classes from './edittask.module.css';\nimport TaskInfoSelect from '../../../components/TaskInfoSelect/TaskInfoSelect';\nimport TimeInput from '../../../components/inputs/TimeInput';\nimport MemberSelect from '../../../components/inputs/MemberSelect';\nimport RegularButton from '../../../components/inputs/RegularButton';\n\nclass EditTask extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      taskName: \"\",\n      comments: \"\",\n      columns: {\n        daysOfTheWeek: [],\n        timeOfDay: \"\",\n        users: []\n      },\n      members: [],\n      error: \"\",\n      selectedUser: \"\",\n      timePeriod: \"AM\",\n      hours: \"\",\n      minutes: \"\",\n      taskID: null,\n      color: \"\",\n      roomName: \"\"\n    };\n\n    this.getCurrentTask = async () => {\n      let taskID = this.props.match.params.taskid;\n      let roomName = this.props.match.params.roomName;\n      let url = MEMBERS_OF_ROOM_URL + \"?roomname=\" + roomName;\n      let taskModel = (await Axios.get(url)).data;\n      let members = taskModel.Members;\n      let task = (await Axios.get(`${TASK_URL}?taskid=${taskID}`)).data;\n      let TaskModel = task.Task;\n      let {\n        taskName,\n        comments,\n        columns,\n        color\n      } = TaskModel;\n      let timeOfDay = columns.timeOfDay;\n      let timeOfDayFull = timeOfDay.split(\" \");\n      let hoursAndMinutes = timeOfDayFull[0];\n      let timePeriod = timeOfDayFull[1];\n      let hours = hoursAndMinutes.split(\":\")[0];\n      let minutes = hoursAndMinutes.split(\":\")[1];\n      let userMap = {};\n\n      for (let user of columns.users) userMap[user._id] = user._id;\n\n      members = members.filter(member => userMap[member._id] == null);\n      let selectedUser = members.length > 0 ? members[0].userName : \"\";\n      this.setState({\n        taskName,\n        comments,\n        columns,\n        members,\n        hours,\n        minutes,\n        timePeriod,\n        selectedUser,\n        taskID,\n        color,\n        roomName\n      });\n    };\n\n    this.taskNameChangedHandler = (event, type) => {\n      let value = event.target.value;\n      this.setState({\n        taskName: value\n      });\n    };\n\n    this.taskCommentsChangedHandler = (event, type) => {\n      let value = event.target.value;\n      this.setState({\n        comments: value\n      });\n    };\n\n    this.daySelected = day => {\n      let columns = { ...this.state.columns\n      };\n      let daysOfTheWeek = [...columns.daysOfTheWeek];\n      if (daysOfTheWeek.includes(day)) daysOfTheWeek.splice(daysOfTheWeek.indexOf(day), 1);else daysOfTheWeek.push(day);\n      columns.daysOfTheWeek = daysOfTheWeek;\n      this.setState({\n        columns\n      });\n    };\n\n    this.changedTime = (time, type) => {\n      if (type === \"hours\") this.setState({\n        hours: time\n      });else this.setState({\n        minutes: time\n      });\n    };\n\n    this.changedtimePeriod = timePeriod => {\n      this.setState({\n        timePeriod: timePeriod\n      });\n    };\n\n    this.addToList = userName => {\n      let columns = { ...this.state.columns\n      };\n      let users = [...columns.users];\n      let user = this.state.members.filter(member => member.userName === userName)[0];\n      users.push(user);\n      columns.users = users;\n      let members = [...this.state.members];\n      members = members.filter(member => member.userName !== userName);\n      let selectedUser = members.length > 0 ? members[0].userName : \"\";\n      this.setState({\n        columns,\n        members,\n        selectedUser\n      });\n    };\n\n    this.removeFromList = userName => {\n      let columns = { ...this.state.columns\n      };\n      let users = [...columns.users];\n      let user = users.filter(member => member.userName === userName)[0];\n      users = users.filter(member => member.userName !== userName);\n      columns.users = users;\n      let members = [...this.state.members];\n      members.push(user);\n      let selectedUser = members[0].userName;\n      this.setState({\n        columns,\n        members,\n        selectedUser\n      });\n    };\n\n    this.selectUserFromDropdown = event => {\n      let selectedUser = event.target.value;\n      this.setState({\n        selectedUser\n      });\n    };\n\n    this.updatedTask = async () => {\n      let columns = {};\n      columns.daysOfTheWeek = this.state.columns.daysOfTheWeek;\n      columns.users = this.state.columns.users;\n      columns.timeOfDay = `${this.state.hours}:${this.state.minutes} ${this.state.timePeriod}`;\n      let taskModel = {\n        taskID: this.state.taskID,\n        taskName: this.state.taskName,\n        comments: this.state.comments,\n        columns: columns,\n        roomName: this.state.roomName,\n        userID: this.props.userID\n      };\n      let taskUpdationStatus = (await Axios.patch(TASK_URL, taskModel)).data;\n      console.log(taskUpdationStatus);\n      this.props.history.goBack();\n    };\n\n    this.deletedTask = async () => {\n      let taskDeletionStatus = await Axios.delete(`${TASK_URL}?task=${this.state.taskID}&roomname=${this.props.match.params.roomName}`);\n      console.log(taskDeletionStatus);\n      this.props.history.goBack();\n    };\n  }\n\n  componentDidMount() {\n    this.getCurrentTask();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Form,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      style: {\n        border: `5px solid ${this.state.color}`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }\n    }, \"Update Task : \", this.state.taskName), /*#__PURE__*/React.createElement(TextInput, {\n      onChange: this.taskNameChangedHandler,\n      type: \"text\",\n      hint: \"Task Name\",\n      value: this.state.taskName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(TextInput, {\n      onChange: this.taskCommentsChangedHandler,\n      type: \"textarea\",\n      hint: \"Comments\",\n      value: this.state.comments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(TaskInfoSelect, {\n      days: this.state.columns.daysOfTheWeek,\n      daySelected: this.daySelected,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(TimeInput, {\n      changedTime: this.changedTime,\n      timePeriod: this.state.timePeriod,\n      changedtimePeriod: this.changedtimePeriod,\n      hours: `${this.state.hours}`,\n      minutes: `${this.state.minutes}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(MemberSelect, {\n      potentialUsers: this.state.members,\n      addToList: this.addToList,\n      addedUsers: this.state.columns.users,\n      selectedUser: this.state.selectedUser,\n      selectUserFromDropdown: this.selectUserFromDropdown,\n      removeFromList: this.removeFromList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(RegularButton, {\n      text: \"Update\",\n      onClick: this.updatedTask,\n      type: \"warning\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(RegularButton, {\n      text: \"Delete\",\n      onClick: this.deletedTask,\n      type: \"danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    roomName: state.roomName,\n    userID: state.userID\n  };\n};\n\nexport default connect(mapStateToProps, null)(EditTask);","map":{"version":3,"sources":["E:/Web Dev/React/RoomEase/RoomEase-FrontEnd/src/containers/Tasks/EditTask/EditTask.js"],"names":["React","Component","Axios","TASK_URL","MEMBERS_OF_ROOM_URL","connect","TextInput","classes","TaskInfoSelect","TimeInput","MemberSelect","RegularButton","EditTask","state","taskName","comments","columns","daysOfTheWeek","timeOfDay","users","members","error","selectedUser","timePeriod","hours","minutes","taskID","color","roomName","getCurrentTask","props","match","params","taskid","url","taskModel","get","data","Members","task","TaskModel","Task","timeOfDayFull","split","hoursAndMinutes","userMap","user","_id","filter","member","length","userName","setState","taskNameChangedHandler","event","type","value","target","taskCommentsChangedHandler","daySelected","day","includes","splice","indexOf","push","changedTime","time","changedtimePeriod","addToList","removeFromList","selectUserFromDropdown","updatedTask","userID","taskUpdationStatus","patch","console","log","history","goBack","deletedTask","taskDeletionStatus","delete","componentDidMount","render","Form","border","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Axios from 'axios';\r\nimport { TASK_URL, MEMBERS_OF_ROOM_URL } from '../../../constants/ServerRoutes';\r\nimport { connect } from 'react-redux';\r\nimport TextInput from '../../../components/inputs/TextInput';\r\nimport * as classes from './edittask.module.css';\r\nimport TaskInfoSelect from '../../../components/TaskInfoSelect/TaskInfoSelect'\r\nimport TimeInput from '../../../components/inputs/TimeInput';\r\nimport MemberSelect from '../../../components/inputs/MemberSelect';\r\nimport RegularButton from '../../../components/inputs/RegularButton';\r\n\r\nclass EditTask extends Component {\r\n\r\n    state = {\r\n        taskName: \"\",\r\n        comments: \"\",\r\n        columns: {\r\n            daysOfTheWeek: [],\r\n            timeOfDay: \"\",\r\n            users: [],\r\n        },\r\n        members: [],\r\n        error: \"\",\r\n        selectedUser: \"\",\r\n        timePeriod: \"AM\",\r\n        hours: \"\",\r\n        minutes: \"\",\r\n        taskID: null,\r\n        color: \"\",\r\n        roomName: \"\",\r\n    }\r\n\r\n\r\n    getCurrentTask = async () => {\r\n\r\n        let taskID = this.props.match.params.taskid;\r\n        let roomName = this.props.match.params.roomName;\r\n\r\n        let url = MEMBERS_OF_ROOM_URL + \"?roomname=\" + roomName;\r\n        let taskModel = (await Axios.get(url)).data;\r\n\r\n        let members = taskModel.Members;\r\n\r\n        let task = (await Axios.get(`${TASK_URL}?taskid=${taskID}`)).data;\r\n        let TaskModel = task.Task;\r\n\r\n        let { taskName, comments, columns, color } = TaskModel;\r\n\r\n        let timeOfDay = columns.timeOfDay;\r\n        let timeOfDayFull = timeOfDay.split(\" \");\r\n        let hoursAndMinutes = timeOfDayFull[0];\r\n        let timePeriod = timeOfDayFull[1];\r\n\r\n        let hours = hoursAndMinutes.split(\":\")[0];\r\n        let minutes = hoursAndMinutes.split(\":\")[1];\r\n\r\n        let userMap = {};\r\n\r\n        for (let user of columns.users)\r\n            userMap[user._id] = user._id;\r\n\r\n\r\n        members = members.filter(member => userMap[member._id] == null)\r\n\r\n        let selectedUser = members.length > 0 ? members[0].userName : \"\";\r\n\r\n        this.setState({\r\n            taskName,\r\n            comments,\r\n            columns,\r\n            members,\r\n            hours,\r\n            minutes,\r\n            timePeriod,\r\n            selectedUser,\r\n            taskID,\r\n            color,\r\n            roomName\r\n        })\r\n\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getCurrentTask();\r\n    }\r\n\r\n    taskNameChangedHandler = (event, type) => {\r\n        let value = event.target.value;\r\n        this.setState({ taskName: value })\r\n    }\r\n\r\n    taskCommentsChangedHandler = (event, type) => {\r\n        let value = event.target.value;\r\n        this.setState({ comments: value })\r\n    }\r\n\r\n    daySelected = (day) => {\r\n        let columns = { ...this.state.columns };\r\n        let daysOfTheWeek = [...columns.daysOfTheWeek];\r\n\r\n        if (daysOfTheWeek.includes(day))\r\n            daysOfTheWeek.splice(daysOfTheWeek.indexOf(day), 1);\r\n        else\r\n            daysOfTheWeek.push(day);\r\n\r\n        columns.daysOfTheWeek = daysOfTheWeek;\r\n\r\n        this.setState({ columns })\r\n    }\r\n\r\n    changedTime = (time, type) => {\r\n\r\n        if (type === \"hours\")\r\n            this.setState({ hours: time })\r\n        else\r\n            this.setState({ minutes: time })\r\n    }\r\n\r\n    changedtimePeriod = (timePeriod) => {\r\n        this.setState({ timePeriod: timePeriod })\r\n    }\r\n\r\n    addToList = (userName) => {\r\n\r\n        let columns = { ...this.state.columns };\r\n        let users = [...columns.users];\r\n\r\n        let user = this.state.members.filter(member => member.userName === userName)[0];\r\n        users.push(user);\r\n\r\n        columns.users = users;\r\n\r\n        let members = [...this.state.members];\r\n        members = members.filter(member => member.userName !== userName);\r\n\r\n        let selectedUser = members.length > 0 ? members[0].userName : \"\";\r\n\r\n\r\n        this.setState({ columns, members, selectedUser });\r\n    }\r\n\r\n    removeFromList = (userName) => {\r\n        let columns = { ...this.state.columns };\r\n        let users = [...columns.users];\r\n\r\n        let user = users.filter(member => member.userName === userName)[0];\r\n\r\n        users = users.filter(member => member.userName !== userName);\r\n\r\n        columns.users = users;\r\n\r\n        let members = [...this.state.members];\r\n        members.push(user);\r\n\r\n        let selectedUser = members[0].userName;\r\n\r\n        this.setState({ columns, members, selectedUser });\r\n    }\r\n\r\n    selectUserFromDropdown = (event) => {\r\n        let selectedUser = event.target.value\r\n        this.setState({ selectedUser })\r\n    }\r\n\r\n    updatedTask = async () => {\r\n        let columns = {};\r\n        columns.daysOfTheWeek = this.state.columns.daysOfTheWeek;\r\n        columns.users = this.state.columns.users;\r\n        columns.timeOfDay = `${this.state.hours}:${this.state.minutes} ${this.state.timePeriod}`\r\n\r\n        let taskModel = {\r\n            taskID: this.state.taskID,\r\n            taskName: this.state.taskName,\r\n            comments: this.state.comments,\r\n            columns: columns,\r\n            roomName: this.state.roomName,\r\n            userID: this.props.userID\r\n        };\r\n\r\n        let taskUpdationStatus = (await Axios.patch(TASK_URL, taskModel)).data;\r\n        console.log(taskUpdationStatus);\r\n        this.props.history.goBack();\r\n\r\n    }\r\n\r\n    deletedTask = async () => {\r\n\r\n        let taskDeletionStatus = (await Axios.delete(`${TASK_URL}?task=${this.state.taskID}&roomname=${this.props.match.params.roomName}`));\r\n        console.log(taskDeletionStatus);\r\n        this.props.history.goBack();\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className={classes.Form}>\r\n                <h2 style={{ border: `5px solid ${this.state.color}` }}>Update Task : {this.state.taskName}</h2>\r\n                <TextInput onChange={this.taskNameChangedHandler} type=\"text\" hint=\"Task Name\" value={this.state.taskName} />\r\n                <TextInput onChange={this.taskCommentsChangedHandler} type=\"textarea\" hint=\"Comments\" value={this.state.comments} />\r\n                <TaskInfoSelect days={this.state.columns.daysOfTheWeek} daySelected={this.daySelected} />\r\n                <TimeInput\r\n                    changedTime={this.changedTime}\r\n                    timePeriod={this.state.timePeriod}\r\n                    changedtimePeriod={this.changedtimePeriod}\r\n                    hours={`${this.state.hours}`}\r\n                    minutes={`${this.state.minutes}`}\r\n                />\r\n                <MemberSelect\r\n                    potentialUsers={this.state.members}\r\n                    addToList={this.addToList}\r\n                    addedUsers={this.state.columns.users}\r\n                    selectedUser={this.state.selectedUser}\r\n                    selectUserFromDropdown={this.selectUserFromDropdown}\r\n                    removeFromList={this.removeFromList}\r\n                ></MemberSelect>\r\n\r\n                <RegularButton text={\"Update\"} onClick={this.updatedTask} type={\"warning\"} />\r\n                <RegularButton text={\"Delete\"} onClick={this.deletedTask} type={\"danger\"} />\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = state => {\r\n    return {\r\n        roomName: state.roomName,\r\n        userID: state.userID\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, null)(EditTask);"]},"metadata":{},"sourceType":"module"}