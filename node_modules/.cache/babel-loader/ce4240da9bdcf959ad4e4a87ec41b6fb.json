{"ast":null,"code":"var _jsxFileName = \"E:\\\\Web Dev\\\\React\\\\RoomEase\\\\RoomEase-FrontEnd\\\\src\\\\containers\\\\SplitEase\\\\AddExpense\\\\AddExpense.js\";\nimport Axios from 'axios';\nimport { MEMBERS_OF_ROOM_URL, SPLIT_EASE_ADD_EXPENSE } from '../../../constants/ServerRoutes';\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport TextInput from '../../../components/inputs/TextInput';\nimport MemberSelect from '../../../components/inputs/MemberSelect';\nimport RegularButton from '../../../components/inputs/RegularButton';\nimport { connect } from 'react-redux';\n\nclass AddExpense extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      expenseDescription: \"\",\n      expenseAmount: \"\",\n      selectedUser: \"\",\n      columns: {\n        users: []\n      },\n      members: [],\n      error: \"\",\n      roomName: null\n    };\n\n    this.fetchAndUpdateUsersOfRoom = async roomName => {\n      try {\n        let url = MEMBERS_OF_ROOM_URL + \"?roomname=\" + roomName;\n        let members = (await Axios.get(url)).data.Members;\n        members = members.filter(member => member._id !== this.props.userID);\n        let selectedUser = members.length > 0 ? members[0].userName : \"\";\n        this.setState({\n          members,\n          selectedUser: selectedUser,\n          error: \"\"\n        });\n      } catch (err) {\n        this.setState({\n          error: err.message\n        });\n      }\n    };\n\n    this.addToList = userName => {\n      let columns = { ...this.state.columns\n      };\n      let users = [...columns.users];\n      let user = this.state.members.filter(member => member.userName === userName)[0];\n      users.push(user);\n      columns.users = users;\n      let members = [...this.state.members];\n      members = members.filter(member => member.userName !== userName);\n      let selectedUser = members.length > 0 ? members[0].userName : \"\";\n      this.setState({\n        columns,\n        members,\n        selectedUser\n      });\n    };\n\n    this.removeFromList = userName => {\n      let columns = { ...this.state.columns\n      };\n      let users = [...columns.users];\n      let user = users.filter(member => member.userName === userName)[0];\n      users = users.filter(member => member.userName !== userName);\n      columns.users = users;\n      let members = [...this.state.members];\n      members.push(user);\n      let selectedUser = members[0].userName;\n      this.setState({\n        columns,\n        members,\n        selectedUser\n      });\n    };\n\n    this.selectUserFromDropdown = event => {\n      let selectedUser = event.target.value;\n      this.setState({\n        selectedUser\n      });\n    };\n\n    this.expenseValueChangedHandler = event => {\n      let expenseAmount = event.target.value;\n      this.setState({\n        expenseAmount\n      });\n    };\n\n    this.expenseDescriptionChangedHandler = event => {\n      this.setState({\n        expenseDescription: event.target.value\n      });\n    };\n\n    this.submitExpense = async () => {\n      let from = this.state.columns.users.map(user => user._id);\n      let to = this.props.userID;\n      let description = this.state.expenseDescription;\n      let value = parseInt(this.state.expenseAmount);\n      let addExpenseStatus = (await Axios.post(SPLIT_EASE_ADD_EXPENSE, {\n        from,\n        to,\n        description,\n        value\n      })).data;\n\n      if (addExpenseStatus.Result === \"Success\") {\n        this.props.fetchSplitWiseData(this.props.userID);\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.fetchAndUpdateUsersOfRoom(this.props.roomName);\n  }\n\n  componentDidUpdate() {\n    if (!this.state.roomName) this.setState({\n      roomName: this.props.roomName\n    }, () => this.fetchAndUpdateUsersOfRoom(this.props.roomName));\n  }\n\n  render() {\n    let members = null;\n\n    if (this.state.roomName && (this.state.members.length > 0 || this.state.columns.users.length > 0)) {\n      members = /*#__PURE__*/React.createElement(MemberSelect, {\n        potentialUsers: this.state.members,\n        addToList: this.addToList,\n        addedUsers: this.state.columns.users,\n        selectedUser: this.state.selectedUser,\n        selectUserFromDropdown: this.selectUserFromDropdown,\n        removeFromList: this.removeFromList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 24\n        }\n      });\n    } else {\n      members = /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 23\n        }\n      }, \"No members in your room\");\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }\n    }, \"Add Expense\"), /*#__PURE__*/React.createElement(TextInput, {\n      onChange: this.expenseDescriptionChangedHandler,\n      type: \"text\",\n      hint: \"Description\",\n      value: this.state.expenseDescription,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(TextInput, {\n      onChange: this.expenseValueChangedHandler,\n      type: \"number\",\n      hint: \"$ Amount\",\n      value: this.state.expenseAmount,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }\n    }), members, this.state.columns.users.length > 0 ? /*#__PURE__*/React.createElement(RegularButton, {\n      text: \"Submit Expense\",\n      onClick: this.submitExpense,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 56\n      }\n    }) : null);\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    userID: state.userID,\n    roomName: state.roomName\n  };\n};\n\nexport default connect(mapStateToProps)(withRouter(AddExpense));","map":{"version":3,"sources":["E:/Web Dev/React/RoomEase/RoomEase-FrontEnd/src/containers/SplitEase/AddExpense/AddExpense.js"],"names":["Axios","MEMBERS_OF_ROOM_URL","SPLIT_EASE_ADD_EXPENSE","React","Component","withRouter","TextInput","MemberSelect","RegularButton","connect","AddExpense","state","expenseDescription","expenseAmount","selectedUser","columns","users","members","error","roomName","fetchAndUpdateUsersOfRoom","url","get","data","Members","filter","member","_id","props","userID","length","userName","setState","err","message","addToList","user","push","removeFromList","selectUserFromDropdown","event","target","value","expenseValueChangedHandler","expenseDescriptionChangedHandler","submitExpense","from","map","to","description","parseInt","addExpenseStatus","post","Result","fetchSplitWiseData","componentDidMount","componentDidUpdate","render","mapStateToProps"],"mappings":"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","sourcesContent":["import Axios from 'axios';\r\nimport { MEMBERS_OF_ROOM_URL, SPLIT_EASE_ADD_EXPENSE } from '../../../constants/ServerRoutes';\r\nimport React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport TextInput from '../../../components/inputs/TextInput';\r\nimport MemberSelect from '../../../components/inputs/MemberSelect';\r\nimport RegularButton from '../../../components/inputs/RegularButton';\r\nimport { connect } from 'react-redux';\r\n\r\nclass AddExpense extends Component {\r\n    state = {\r\n        expenseDescription: \"\",\r\n        expenseAmount: \"\",\r\n        selectedUser: \"\",\r\n        columns: {\r\n            users: [],\r\n        },\r\n        members: [],\r\n        error: \"\",\r\n        roomName: null\r\n    }\r\n\r\n    fetchAndUpdateUsersOfRoom = async (roomName) => {\r\n        try {\r\n            let url = MEMBERS_OF_ROOM_URL + \"?roomname=\" + roomName;\r\n            let members = (await Axios.get(url)).data.Members;\r\n\r\n            members = members.filter(member => member._id !== this.props.userID)\r\n\r\n            let selectedUser = members.length > 0 ? members[0].userName : \"\";\r\n\r\n            this.setState({ members, selectedUser: selectedUser, error: \"\" })\r\n        } catch (err) {\r\n            this.setState({ error: err.message })\r\n        }\r\n    }\r\n\r\n    addToList = (userName) => {\r\n        let columns = { ...this.state.columns };\r\n        let users = [...columns.users];\r\n\r\n        let user = this.state.members.filter(member => member.userName === userName)[0];\r\n        users.push(user);\r\n\r\n        columns.users = users;\r\n\r\n        let members = [...this.state.members];\r\n        members = members.filter(member => member.userName !== userName);\r\n\r\n        let selectedUser = members.length > 0 ? members[0].userName : \"\";\r\n\r\n        this.setState({ columns, members, selectedUser });\r\n    }\r\n\r\n    removeFromList = (userName) => {\r\n        let columns = { ...this.state.columns };\r\n        let users = [...columns.users];\r\n\r\n        let user = users.filter(member => member.userName === userName)[0];\r\n\r\n        users = users.filter(member => member.userName !== userName);\r\n\r\n        columns.users = users;\r\n\r\n        let members = [...this.state.members];\r\n        members.push(user);\r\n\r\n        let selectedUser = members[0].userName;\r\n\r\n        this.setState({ columns, members, selectedUser });\r\n    }\r\n\r\n    selectUserFromDropdown = (event) => {\r\n        let selectedUser = event.target.value\r\n        this.setState({ selectedUser })\r\n    }\r\n\r\n    expenseValueChangedHandler = (event) => {\r\n        let expenseAmount = event.target.value;\r\n        this.setState({ expenseAmount })\r\n    }\r\n\r\n    expenseDescriptionChangedHandler = (event) => {\r\n        this.setState({ expenseDescription: event.target.value })\r\n    }\r\n\r\n    submitExpense = async () => {\r\n        let from = this.state.columns.users.map(user => user._id);\r\n        let to = this.props.userID;\r\n        let description = this.state.expenseDescription;\r\n        let value = parseInt(this.state.expenseAmount);\r\n\r\n        let addExpenseStatus = (await Axios.post(SPLIT_EASE_ADD_EXPENSE, { from, to, description, value })).data;\r\n\r\n        if (addExpenseStatus.Result === \"Success\") {\r\n            this.props.fetchSplitWiseData(this.props.userID);\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchAndUpdateUsersOfRoom(this.props.roomName);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (!this.state.roomName)\r\n            this.setState({ roomName: this.props.roomName }, () => this.fetchAndUpdateUsersOfRoom(this.props.roomName))\r\n    }\r\n\r\n    render() {\r\n\r\n        let members = null;\r\n        if (this.state.roomName && (this.state.members.length > 0 || this.state.columns.users.length > 0)) {\r\n            members = (<MemberSelect\r\n                potentialUsers={this.state.members}\r\n                addToList={this.addToList}\r\n                addedUsers={this.state.columns.users}\r\n                selectedUser={this.state.selectedUser}\r\n                selectUserFromDropdown={this.selectUserFromDropdown}\r\n                removeFromList={this.removeFromList}\r\n            ></MemberSelect>)\r\n        }\r\n        else {\r\n            members = <p>No members in your room</p>\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h1>Add Expense</h1>\r\n                <TextInput onChange={this.expenseDescriptionChangedHandler} type=\"text\" hint=\"Description\" value={this.state.expenseDescription} />\r\n                <TextInput onChange={this.expenseValueChangedHandler} type=\"number\" hint=\"$ Amount\" value={this.state.expenseAmount} />\r\n                {members}\r\n                {this.state.columns.users.length > 0 ? <RegularButton text={\"Submit Expense\"} onClick={this.submitExpense} /> : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = state => {\r\n    return {\r\n        userID: state.userID,\r\n        roomName: state.roomName,\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps)(withRouter(AddExpense));"]},"metadata":{},"sourceType":"module"}