{"ast":null,"code":"var _jsxFileName = \"E:\\\\Web Dev\\\\React\\\\RoomEase\\\\RoomEase-FrontEnd\\\\src\\\\containers\\\\SplitEase\\\\SplitEaseExpenses\\\\SplitEaseExpenses.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as SplitEaseServerRoutes from '../../../constants/ServerRoutes';\nimport Axios from 'axios';\nimport userIcon from '../../../assets/profile.png';\nimport * as classes from './splitexpenses.module.css';\n\nclass SpliteaseExpenses extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      userID: null,\n      expenses: []\n    };\n\n    this.fetchExpenses = async userID => {\n      let {\n        balanceMap\n      } = (await Axios.get(`${SplitEaseServerRoutes.SPLIT_EASE_GET_EXPENSES}?userID=${userID}`)).data;\n      let expenses = [];\n\n      for (let balance in balanceMap) {\n        let expenseObj = {\n          userName: balanceMap[balance].userName,\n          id: balanceMap[balance]._id,\n          balance: balanceMap[balance].balance\n        };\n        expenses.push(expenseObj);\n      }\n\n      this.setState({\n        expenses\n      });\n    };\n\n    this.settleUpExpense = async (from, balance) => {\n      let to = this.state.userID;\n      let paybackExpenseObj = {\n        to: to,\n        from: from,\n        description: \"\",\n        value: balance\n      };\n      let settleUpResponse = (await Axios.post(SplitEaseServerRoutes.SPLIT_EASE_SETTLE_IP, paybackExpenseObj)).data;\n\n      if (settleUpResponse.Result === \"Success\") {\n        this.fetchExpenses(to);\n        this.props.fetchSplitWiseData(this.props.userID);\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.userID && !this.state.userID) this.setState({\n      userID: this.props.userID\n    }, () => this.fetchExpenses(this.props.userID));\n  }\n\n  componentDidUpdate() {\n    if (this.props.userID && !this.state.userID) this.setState({\n      userID: this.props.userID\n    }, () => this.fetchExpenses(this.props.userID));\n  }\n\n  render() {\n    let renderUserExpenseList = () => {\n      let expenses = [...this.state.expenses];\n      let list = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }\n      }, expenses.map(expense => {\n        let {\n          id,\n          userName,\n          balance\n        } = expense;\n        let balanceMessage = \"All Settled up\";\n        let userBalance = null;\n        let totalBalanceDisplayClasses = classes.TotalBalanceDisplayRegular;\n        let settleUpObj = {\n          message: \"Settle Up\",\n          settleUpExpense: this.settleUpExpense,\n          balance: Math.abs(balance),\n          getBody: function () {\n            return /*#__PURE__*/React.createElement(\"div\", {\n              className: classes.settleUp,\n              onClick: () => this.settleUpExpense(id, this.balance),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 37\n              }\n            }, /*#__PURE__*/React.createElement(\"p\", {\n              className: classes.settleUpMessage,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 41\n              }\n            }, this.message));\n          },\n          show: false\n        };\n\n        if (balance > 0) {\n          userBalance = /*#__PURE__*/React.createElement(\"p\", {\n            className: classes.userBalance,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 43\n            }\n          }, \"$ \", balance);\n          balanceMessage = \"Owes You\";\n          totalBalanceDisplayClasses = classes.TotalBalanceDisplayPositive;\n        } else if (balance < 0) {\n          settleUpObj.show = true;\n          balance = Math.abs(balance);\n          userBalance = /*#__PURE__*/React.createElement(\"p\", {\n            className: classes.userBalance,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 43\n            }\n          }, \"$ \", balance);\n          balanceMessage = \"You Owe\";\n          totalBalanceDisplayClasses = classes.TotalBalanceDisplayNegative;\n        }\n\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: id,\n          className: classes.ExpenseContainer,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: classes.UserExpense,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 33\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: classes.userProfile,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          src: userIcon,\n          alt: \"Profile Icon\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 74\n          }\n        })), /*#__PURE__*/React.createElement(\"p\", {\n          className: classes.userName,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 37\n          }\n        }, userName), /*#__PURE__*/React.createElement(\"div\", {\n          className: totalBalanceDisplayClasses,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          className: classes.balanceMessage,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 41\n          }\n        }, balanceMessage), userBalance)), settleUpObj.show ? settleUpObj.getBody() : null);\n      }));\n      return list;\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }\n    }, renderUserExpenseList());\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    userID: state.userID\n  };\n};\n\nexport default connect(mapStateToProps, null)(SpliteaseExpenses);","map":{"version":3,"sources":["E:/Web Dev/React/RoomEase/RoomEase-FrontEnd/src/containers/SplitEase/SplitEaseExpenses/SplitEaseExpenses.js"],"names":["React","Component","connect","SplitEaseServerRoutes","Axios","userIcon","classes","SpliteaseExpenses","state","userID","expenses","fetchExpenses","balanceMap","get","SPLIT_EASE_GET_EXPENSES","data","balance","expenseObj","userName","id","_id","push","setState","settleUpExpense","from","to","paybackExpenseObj","description","value","settleUpResponse","post","SPLIT_EASE_SETTLE_IP","Result","props","fetchSplitWiseData","componentDidMount","componentDidUpdate","render","renderUserExpenseList","list","map","expense","balanceMessage","userBalance","totalBalanceDisplayClasses","TotalBalanceDisplayRegular","settleUpObj","message","Math","abs","getBody","settleUp","settleUpMessage","show","TotalBalanceDisplayPositive","TotalBalanceDisplayNegative","ExpenseContainer","UserExpense","userProfile","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as SplitEaseServerRoutes from '../../../constants/ServerRoutes'\r\nimport Axios from 'axios';\r\nimport userIcon from '../../../assets/profile.png';\r\nimport * as classes from './splitexpenses.module.css'\r\n\r\nclass SpliteaseExpenses extends Component {\r\n    state = {\r\n        userID: null,\r\n        expenses: [],\r\n    }\r\n\r\n    fetchExpenses = async (userID) => {\r\n        let { balanceMap } = (await Axios.get(`${SplitEaseServerRoutes.SPLIT_EASE_GET_EXPENSES}?userID=${userID}`)).data;\r\n\r\n        let expenses = [];\r\n\r\n        for (let balance in balanceMap) {\r\n            let expenseObj = {\r\n                userName: balanceMap[balance].userName,\r\n                id: balanceMap[balance]._id,\r\n                balance: balanceMap[balance].balance,\r\n            };\r\n\r\n            expenses.push(expenseObj);\r\n        }\r\n\r\n        this.setState({ expenses })\r\n\r\n    }\r\n\r\n    settleUpExpense = async (from, balance) => {\r\n        let to = this.state.userID;\r\n\r\n        let paybackExpenseObj = {\r\n            to: to,\r\n            from: from,\r\n            description: \"\",\r\n            value: balance\r\n        }\r\n\r\n        let settleUpResponse = (await Axios.post(SplitEaseServerRoutes.SPLIT_EASE_SETTLE_IP, paybackExpenseObj)).data;\r\n        if (settleUpResponse.Result === \"Success\") {\r\n            this.fetchExpenses(to);\r\n            this.props.fetchSplitWiseData(this.props.userID);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.userID && !this.state.userID)\r\n            this.setState({ userID: this.props.userID }, () => this.fetchExpenses(this.props.userID))\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.userID && !this.state.userID)\r\n            this.setState({ userID: this.props.userID }, () => this.fetchExpenses(this.props.userID))\r\n    }\r\n\r\n\r\n    render() {\r\n        let renderUserExpenseList = () => {\r\n\r\n            let expenses = [...this.state.expenses];\r\n\r\n            let list = (\r\n                <div>\r\n                    {expenses.map(expense => {\r\n\r\n                        let { id, userName, balance } = expense;\r\n\r\n                        let balanceMessage = \"All Settled up\";\r\n                        let userBalance = null;\r\n                        let totalBalanceDisplayClasses = classes.TotalBalanceDisplayRegular;\r\n\r\n                        let settleUpObj = {\r\n                            message: \"Settle Up\",\r\n                            settleUpExpense: this.settleUpExpense,\r\n                            balance: Math.abs(balance),\r\n                            getBody: function () {\r\n                                return (\r\n                                    <div className={classes.settleUp} onClick={() => this.settleUpExpense(id, this.balance)}>\r\n                                        <p className={classes.settleUpMessage}>{this.message}</p>\r\n                                    </div>\r\n                                )\r\n                            },\r\n                            show: false,\r\n                        };\r\n\r\n                        if (balance > 0) {\r\n                            userBalance = <p className={classes.userBalance}>$ {balance}</p>\r\n                            balanceMessage = \"Owes You\"\r\n                            totalBalanceDisplayClasses = classes.TotalBalanceDisplayPositive;\r\n                        }\r\n                        else if (balance < 0) {\r\n                            settleUpObj.show = true;\r\n\r\n                            balance = Math.abs(balance);\r\n                            userBalance = <p className={classes.userBalance}>$ {balance}</p>\r\n                            balanceMessage = \"You Owe\"\r\n                            totalBalanceDisplayClasses = classes.TotalBalanceDisplayNegative;\r\n                        }\r\n\r\n\r\n                        return (\r\n                            <div key={id} className={classes.ExpenseContainer}>\r\n                                <div className={classes.UserExpense} >\r\n                                    <div className={classes.userProfile}><img src={userIcon} alt={\"Profile Icon\"}></img></div>\r\n                                    <p className={classes.userName}>{userName}</p>\r\n                                    <div className={totalBalanceDisplayClasses}>\r\n                                        <p className={classes.balanceMessage}>{balanceMessage}</p>\r\n                                        {userBalance}\r\n                                    </div>\r\n                                </div>\r\n                                {settleUpObj.show ? settleUpObj.getBody() : null}\r\n                            </div>\r\n                        )\r\n                    })\r\n                    }\r\n                </div>\r\n            );\r\n\r\n            return list;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {renderUserExpenseList()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = state => {\r\n    return {\r\n        userID: state.userID\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(SpliteaseExpenses);"]},"metadata":{},"sourceType":"module"}