{"ast":null,"code":"var _jsxFileName = \"E:\\\\Web Dev\\\\React\\\\RoomEase\\\\RoomEase-FrontEnd\\\\src\\\\containers\\\\SplitEase\\\\SplitEaseFeed\\\\SplitEaseFeed.js\";\nimport React, { Component } from 'react';\nimport * as SplitEaseServerRoutes from '../../../constants/ServerRoutes';\nimport Axios from 'axios';\nimport { connect } from 'react-redux';\nimport Auxillary from '../../../hoc/Auxillary';\nimport classes from './spliteasefeed.module.css';\nimport Backdrop from '../../../components/Backdrop/Backdrop';\nimport Modal from '../../../components/Modal/Modal';\nimport RegularButton from '../../../components/inputs/RegularButton';\n\nclass SplitEaseFeed extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      userID: null,\n      feed: [],\n      modalOpen: false,\n      currentExpense: null,\n      expenseData: null,\n      totalCost: 0\n    };\n\n    this.modalToggle = async (id, totalCost) => {\n      let modalOpen = !this.state.modalOpen;\n      if (typeof id !== \"string\") this.setState({\n        currentExpense: null\n      });else this.setState({\n        currentExpense: this.state.feed.filter(f => f._id === id)[0]\n      });\n\n      if (modalOpen) {\n        console.log(id);\n        let expenseData = (await Axios.get(`${SplitEaseServerRoutes.SPLIT_EASE_GET_EXPENSE_DETAILS}?expenseID=${id}`)).data.data;\n        this.setState({\n          expenseData: expenseData\n        });\n        if (expenseData.expenseType !== \"payback\") this.setState({\n          modalOpen\n        });\n      } else this.setState({\n        modalOpen\n      });\n    };\n\n    this.fetchFeedData = async userID => {\n      let splitWiseFeedModel = await Axios.get(`${SplitEaseServerRoutes.SPLIT_EASE_GET_EXPENSE_FEED}?userID=${userID}`);\n      let {\n        data: {\n          feed\n        }\n      } = splitWiseFeedModel; // console.log(feed);\n\n      this.setState({\n        feed\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.userID && !this.state.userID) {\n      // console.log(\"In if mount\");\n      this.setState({\n        userID: this.props.userID\n      }, () => this.fetchFeedData(this.props.userID));\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.props.userID && !this.state.userID) {\n      // console.log(\"In if update\");\n      this.setState({\n        userID: this.props.userID\n      }, () => this.fetchFeedData(this.props.userID));\n    }\n  }\n\n  render() {\n    let renderList = () => {\n      let list = /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.FeedList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }\n      }, this.state.feed.map(activity => {\n        let note = activity.description;\n        let DescriptionClasses = [classes.Subheading, note.includes(\"You\") ? classes.SubheadingSuccess : classes.SubheadingWarning];\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: classes.FeedContainer,\n          key: activity._id,\n          onClick: () => this.modalToggle(activity.expenseID, activity.value),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: classes.TotalValue,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 33\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: classes.ValueCircle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 37\n          }\n        }, activity.value, \"$\")), /*#__PURE__*/React.createElement(\"div\", {\n          className: classes.Feed,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 33\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          className: classes.Description,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 37\n          }\n        }, activity.description), /*#__PURE__*/React.createElement(\"p\", {\n          className: DescriptionClasses.join(\" \"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 37\n          }\n        }, activity.subheading), /*#__PURE__*/React.createElement(\"p\", {\n          className: classes.Date,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 37\n          }\n        }, activity.date)));\n      }));\n      return list;\n    };\n\n    let modal = null; //All the code will be executed only if modal is open\n\n    if (this.state.modalOpen) {\n      let expenseData = this.state.expenseData;\n      console.log(this.state.feed);\n      console.log(expenseData);\n      let {\n        description,\n        to: {\n          userName,\n          _id\n        },\n        eachContribution,\n        from,\n        deleted,\n        expenseType\n      } = expenseData;\n      let totalCost = `$ ${(eachContribution * (from.length + 1)).toFixed(2)}`;\n      let totalOwedToMe = (eachContribution * from.length).toFixed(2);\n      let showDeleteButton = false;\n\n      if (_id === this.props.userID) {\n        userName = `You (${userName})`;\n        if (expenseType === \"expense\") showDeleteButton = true;\n      }\n\n      let expenseHeader = `${userName} ${deleted ? \"deleted expense\" : \"added\"} ${description}`;\n      let deleteButton = null;\n\n      if (showDeleteButton) {\n        deleteButton = /*#__PURE__*/React.createElement(RegularButton, {\n          text: \"Delete\",\n          disabled: deleted,\n          onClick: async () => {\n            let deleteStatus = (await Axios.delete(`${SplitEaseServerRoutes.SPLIT_EASE_REMOVE_EXPENSE}?expenseID=${expenseData._id}`)).data; // console.log(deleteStatus);\n\n            if (deleteStatus.Result === \"Success\") {\n              this.modalToggle();\n            }\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 33\n          }\n        });\n      }\n\n      modal = /*#__PURE__*/React.createElement(Auxillary, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Backdrop, {\n        show: this.state.modalOpen,\n        onClick: this.modalToggle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(Modal, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.ModalHeader,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: classes.ExpenseHeader,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 29\n        }\n      }, expenseHeader), /*#__PURE__*/React.createElement(\"p\", {\n        className: classes.TotalCost,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 29\n        }\n      }, totalCost)), /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.ModalBody,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: classes.ValueBreakdown,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 29\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 68\n        }\n      }, userName), \" paid \", /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 91\n        }\n      }, totalCost), \" and is owed \", /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 122\n        }\n      }, \"$\", totalOwedToMe)), from.map(f => {\n        return /*#__PURE__*/React.createElement(\"p\", {\n          className: classes.ValueBreakdown,\n          key: f._id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 37\n          }\n        }, \" \", /*#__PURE__*/React.createElement(\"b\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 88\n          }\n        }, f.userName), \" owes \", /*#__PURE__*/React.createElement(\"b\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 113\n          }\n        }, \"$\", eachContribution));\n      }), deleteButton)));\n    }\n\n    return /*#__PURE__*/React.createElement(Auxillary, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }\n    }, renderList(), modal);\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    userID: state.userID\n  };\n};\n\nexport default connect(mapStateToProps, null)(SplitEaseFeed);","map":{"version":3,"sources":["E:/Web Dev/React/RoomEase/RoomEase-FrontEnd/src/containers/SplitEase/SplitEaseFeed/SplitEaseFeed.js"],"names":["React","Component","SplitEaseServerRoutes","Axios","connect","Auxillary","classes","Backdrop","Modal","RegularButton","SplitEaseFeed","state","userID","feed","modalOpen","currentExpense","expenseData","totalCost","modalToggle","id","setState","filter","f","_id","console","log","get","SPLIT_EASE_GET_EXPENSE_DETAILS","data","expenseType","fetchFeedData","splitWiseFeedModel","SPLIT_EASE_GET_EXPENSE_FEED","componentDidMount","props","componentDidUpdate","render","renderList","list","FeedList","map","activity","note","description","DescriptionClasses","Subheading","includes","SubheadingSuccess","SubheadingWarning","FeedContainer","expenseID","value","TotalValue","ValueCircle","Feed","Description","join","subheading","Date","date","modal","to","userName","eachContribution","from","deleted","length","toFixed","totalOwedToMe","showDeleteButton","expenseHeader","deleteButton","deleteStatus","delete","SPLIT_EASE_REMOVE_EXPENSE","Result","ModalHeader","ExpenseHeader","TotalCost","ModalBody","ValueBreakdown","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,qBAAZ,MAAuC,iCAAvC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,OAAOC,QAAP,MAAqB,uCAArB;AACA,OAAOC,KAAP,MAAkB,iCAAlB;AACA,OAAOC,aAAP,MAA0B,0CAA1B;;AAEA,MAAMC,aAAN,SAA4BT,SAA5B,CAAsC;AAAA;AAAA;AAAA,SAElCU,KAFkC,GAE1B;AACJC,MAAAA,MAAM,EAAE,IADJ;AAEJC,MAAAA,IAAI,EAAE,EAFF;AAGJC,MAAAA,SAAS,EAAE,KAHP;AAIJC,MAAAA,cAAc,EAAE,IAJZ;AAKJC,MAAAA,WAAW,EAAE,IALT;AAMJC,MAAAA,SAAS,EAAE;AANP,KAF0B;;AAAA,SAYlCC,WAZkC,GAYpB,OAAOC,EAAP,EAAWF,SAAX,KAAyB;AACnC,UAAIH,SAAS,GAAG,CAAC,KAAKH,KAAL,CAAWG,SAA5B;AAEA,UAAI,OAAOK,EAAP,KAAc,QAAlB,EACI,KAAKC,QAAL,CAAc;AAAEL,QAAAA,cAAc,EAAE;AAAlB,OAAd,EADJ,KAII,KAAKK,QAAL,CAAc;AAAEL,QAAAA,cAAc,EAAE,KAAKJ,KAAL,CAAWE,IAAX,CAAgBQ,MAAhB,CAAuBC,CAAC,IAAIA,CAAC,CAACC,GAAF,KAAUJ,EAAtC,EAA0C,CAA1C;AAAlB,OAAd;;AAEJ,UAAIL,SAAJ,EAAe;AACXU,QAAAA,OAAO,CAACC,GAAR,CAAYN,EAAZ;AACA,YAAIH,WAAW,GAAG,CAAC,MAAMb,KAAK,CAACuB,GAAN,CAAW,GAAExB,qBAAqB,CAACyB,8BAA+B,cAAaR,EAAG,EAAlF,CAAP,EAA6FS,IAA7F,CAAkGA,IAApH;AACA,aAAKR,QAAL,CAAc;AAAEJ,UAAAA,WAAW,EAAEA;AAAf,SAAd;AAEA,YAAIA,WAAW,CAACa,WAAZ,KAA4B,SAAhC,EAEI,KAAKT,QAAL,CAAc;AAAEN,UAAAA;AAAF,SAAd;AACP,OARD,MAUI,KAAKM,QAAL,CAAc;AAAEN,QAAAA;AAAF,OAAd;AAEP,KAjCiC;;AAAA,SAmClCgB,aAnCkC,GAmClB,MAAOlB,MAAP,IAAkB;AAC9B,UAAImB,kBAAkB,GAAI,MAAM5B,KAAK,CAACuB,GAAN,CAAW,GAAExB,qBAAqB,CAAC8B,2BAA4B,WAAUpB,MAAO,EAAhF,CAAhC;AACA,UAAI;AAAEgB,QAAAA,IAAI,EAAE;AAAEf,UAAAA;AAAF;AAAR,UAAqBkB,kBAAzB,CAF8B,CAG9B;;AACA,WAAKX,QAAL,CAAc;AAAEP,QAAAA;AAAF,OAAd;AAEH,KAzCiC;AAAA;;AA2ClCoB,EAAAA,iBAAiB,GAAG;AAChB,QAAI,KAAKC,KAAL,CAAWtB,MAAX,IAAqB,CAAC,KAAKD,KAAL,CAAWC,MAArC,EAA6C;AACzC;AACA,WAAKQ,QAAL,CAAc;AAAER,QAAAA,MAAM,EAAE,KAAKsB,KAAL,CAAWtB;AAArB,OAAd,EAA6C,MAAM,KAAKkB,aAAL,CAAmB,KAAKI,KAAL,CAAWtB,MAA9B,CAAnD;AACH;AACJ;;AAEDuB,EAAAA,kBAAkB,GAAG;AACjB,QAAI,KAAKD,KAAL,CAAWtB,MAAX,IAAqB,CAAC,KAAKD,KAAL,CAAWC,MAArC,EAA6C;AACzC;AACA,WAAKQ,QAAL,CAAc;AAAER,QAAAA,MAAM,EAAE,KAAKsB,KAAL,CAAWtB;AAArB,OAAd,EAA6C,MAAM,KAAKkB,aAAL,CAAmB,KAAKI,KAAL,CAAWtB,MAA9B,CAAnD;AACH;AACJ;;AAEDwB,EAAAA,MAAM,GAAG;AAEL,QAAIC,UAAU,GAAG,MAAM;AACnB,UAAIC,IAAI,gBACJ;AAAK,QAAA,SAAS,EAAEhC,OAAO,CAACiC,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAK5B,KAAL,CAAWE,IAAX,CAAgB2B,GAAhB,CAAoBC,QAAQ,IAAI;AAC7B,YAAIC,IAAI,GAAGD,QAAQ,CAACE,WAApB;AACA,YAAIC,kBAAkB,GAAG,CAACtC,OAAO,CAACuC,UAAT,EAAqBH,IAAI,CAACI,QAAL,CAAc,KAAd,IAAuBxC,OAAO,CAACyC,iBAA/B,GAAmDzC,OAAO,CAAC0C,iBAAhF,CAAzB;AAEA,4BACI;AAAK,UAAA,SAAS,EAAE1C,OAAO,CAAC2C,aAAxB;AAAuC,UAAA,GAAG,EAAER,QAAQ,CAAClB,GAArD;AAA0D,UAAA,OAAO,EAAE,MAAM,KAAKL,WAAL,CAAiBuB,QAAQ,CAACS,SAA1B,EAAqCT,QAAQ,CAACU,KAA9C,CAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI;AAAK,UAAA,SAAS,EAAE7C,OAAO,CAAC8C,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI;AAAK,UAAA,SAAS,EAAE9C,OAAO,CAAC+C,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAsCZ,QAAQ,CAACU,KAA/C,MADJ,CADJ,eAII;AAAK,UAAA,SAAS,EAAE7C,OAAO,CAACgD,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI;AAAG,UAAA,SAAS,EAAEhD,OAAO,CAACiD,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAoCd,QAAQ,CAACE,WAA7C,CADJ,eAEI;AAAG,UAAA,SAAS,EAAEC,kBAAkB,CAACY,IAAnB,CAAwB,GAAxB,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA6Cf,QAAQ,CAACgB,UAAtD,CAFJ,eAGI;AAAG,UAAA,SAAS,EAAEnD,OAAO,CAACoD,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA6BjB,QAAQ,CAACkB,IAAtC,CAHJ,CAJJ,CADJ;AAYH,OAhBA,CADL,CADJ;AAqBA,aAAOrB,IAAP;AACH,KAvBD;;AAyBA,QAAIsB,KAAK,GAAG,IAAZ,CA3BK,CA8BL;;AACA,QAAI,KAAKjD,KAAL,CAAWG,SAAf,EAA0B;AACtB,UAAIE,WAAW,GAAG,KAAKL,KAAL,CAAWK,WAA7B;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKd,KAAL,CAAWE,IAAvB;AACAW,MAAAA,OAAO,CAACC,GAAR,CAAYT,WAAZ;AACA,UAAI;AAAE2B,QAAAA,WAAF;AAAekB,QAAAA,EAAE,EAAE;AAAEC,UAAAA,QAAF;AAAYvC,UAAAA;AAAZ,SAAnB;AAAsCwC,QAAAA,gBAAtC;AAAwDC,QAAAA,IAAxD;AAA8DC,QAAAA,OAA9D;AAAuEpC,QAAAA;AAAvE,UAAuFb,WAA3F;AACA,UAAIC,SAAS,GAAI,KAAI,CAAC8C,gBAAgB,IAAIC,IAAI,CAACE,MAAL,GAAc,CAAlB,CAAjB,EAAuCC,OAAvC,CAA+C,CAA/C,CAAkD,EAAvE;AACA,UAAIC,aAAa,GAAG,CAACL,gBAAgB,GAAIC,IAAI,CAACE,MAA1B,EAAmCC,OAAnC,CAA2C,CAA3C,CAApB;AACA,UAAIE,gBAAgB,GAAG,KAAvB;;AAEA,UAAI9C,GAAG,KAAK,KAAKW,KAAL,CAAWtB,MAAvB,EAA+B;AAC3BkD,QAAAA,QAAQ,GAAI,QAAOA,QAAS,GAA5B;AAEA,YAAIjC,WAAW,KAAK,SAApB,EACIwC,gBAAgB,GAAG,IAAnB;AACP;;AAED,UAAIC,aAAa,GAAI,GAAER,QAAS,IAAGG,OAAO,GAAG,iBAAH,GAAuB,OAAQ,IAAGtB,WAAY,EAAxF;AAEA,UAAI4B,YAAY,GAAG,IAAnB;;AACA,UAAIF,gBAAJ,EAAsB;AAClBE,QAAAA,YAAY,gBAAI,oBAAC,aAAD;AACZ,UAAA,IAAI,EAAC,QADO;AAEZ,UAAA,QAAQ,EAAEN,OAFE;AAGZ,UAAA,OAAO,EAAE,YAAY;AACjB,gBAAIO,YAAY,GAAG,CAAC,MAAMrE,KAAK,CAACsE,MAAN,CAAc,GAAEvE,qBAAqB,CAACwE,yBAA0B,cAAa1D,WAAW,CAACO,GAAI,EAA7F,CAAP,EAAwGK,IAA3H,CADiB,CAEjB;;AACA,gBAAI4C,YAAY,CAACG,MAAb,KAAwB,SAA5B,EAAuC;AACnC,mBAAKzD,WAAL;AACH;AACJ,WATW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAhB;AAYH;;AAED0C,MAAAA,KAAK,gBACD,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,QAAD;AACI,QAAA,IAAI,EAAE,KAAKjD,KAAL,CAAWG,SADrB;AAEI,QAAA,OAAO,EAAE,KAAKI,WAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,eAOI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAEZ,OAAO,CAACsE,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAG,QAAA,SAAS,EAAEtE,OAAO,CAACuE,aAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAsCP,aAAtC,CADJ,eAEI;AAAG,QAAA,SAAS,EAAEhE,OAAO,CAACwE,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAkC7D,SAAlC,CAFJ,CADJ,eAKI;AAAK,QAAA,SAAS,EAAEX,OAAO,CAACyE,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAG,QAAA,SAAS,EAAEzE,OAAO,CAAC0E,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIlB,QAAJ,CAAvC,yBAA8D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI7C,SAAJ,CAA9D,gCAA6F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAKmD,aAAL,CAA7F,CADJ,EAEKJ,IAAI,CAACxB,GAAL,CAASlB,CAAC,IAAI;AACX,4BACI;AAAG,UAAA,SAAS,EAAEhB,OAAO,CAAC0E,cAAtB;AAAsC,UAAA,GAAG,EAAE1D,CAAC,CAACC,GAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAID,CAAC,CAACwC,QAAN,CAAnD,yBAA4E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAKC,gBAAL,CAA5E,CADJ;AAGH,OAJA,CAFL,EAOKQ,YAPL,CALJ,CAPJ,CADJ;AAyBH;;AAGD,wBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKlC,UAAU,EADf,EAEKuB,KAFL,CADJ;AAMH;;AA5JiC;;AAgKtC,IAAIqB,eAAe,GAAGtE,KAAK,IAAI;AAC3B,SAAO;AACHC,IAAAA,MAAM,EAAED,KAAK,CAACC;AADX,GAAP;AAGH,CAJD;;AAOA,eAAeR,OAAO,CAAC6E,eAAD,EAAkB,IAAlB,CAAP,CAA+BvE,aAA/B,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport * as SplitEaseServerRoutes from '../../../constants/ServerRoutes'\r\nimport Axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport Auxillary from '../../../hoc/Auxillary';\r\nimport classes from './spliteasefeed.module.css';\r\nimport Backdrop from '../../../components/Backdrop/Backdrop';\r\nimport Modal from '../../../components/Modal/Modal';\r\nimport RegularButton from '../../../components/inputs/RegularButton';\r\n\r\nclass SplitEaseFeed extends Component {\r\n\r\n    state = {\r\n        userID: null,\r\n        feed: [],\r\n        modalOpen: false,\r\n        currentExpense: null,\r\n        expenseData: null,\r\n        totalCost: 0,\r\n    }\r\n\r\n\r\n    modalToggle = async (id, totalCost) => {\r\n        let modalOpen = !this.state.modalOpen\r\n\r\n        if (typeof id !== \"string\")\r\n            this.setState({ currentExpense: null });\r\n\r\n        else\r\n            this.setState({ currentExpense: this.state.feed.filter(f => f._id === id)[0] });\r\n\r\n        if (modalOpen) {\r\n            console.log(id);\r\n            let expenseData = (await Axios.get(`${SplitEaseServerRoutes.SPLIT_EASE_GET_EXPENSE_DETAILS}?expenseID=${id}`)).data.data;\r\n            this.setState({ expenseData: expenseData })\r\n\r\n            if (expenseData.expenseType !== \"payback\")\r\n\r\n                this.setState({ modalOpen })\r\n        }\r\n        else\r\n            this.setState({ modalOpen })\r\n\r\n    }\r\n\r\n    fetchFeedData = async (userID) => {\r\n        let splitWiseFeedModel = (await Axios.get(`${SplitEaseServerRoutes.SPLIT_EASE_GET_EXPENSE_FEED}?userID=${userID}`));\r\n        let { data: { feed } } = splitWiseFeedModel;\r\n        // console.log(feed);\r\n        this.setState({ feed })\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.userID && !this.state.userID) {\r\n            // console.log(\"In if mount\");\r\n            this.setState({ userID: this.props.userID }, () => this.fetchFeedData(this.props.userID))\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.userID && !this.state.userID) {\r\n            // console.log(\"In if update\");\r\n            this.setState({ userID: this.props.userID }, () => this.fetchFeedData(this.props.userID))\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        let renderList = () => {\r\n            let list = (\r\n                <div className={classes.FeedList}>\r\n                    {this.state.feed.map(activity => {\r\n                        let note = activity.description;\r\n                        let DescriptionClasses = [classes.Subheading, note.includes(\"You\") ? classes.SubheadingSuccess : classes.SubheadingWarning];\r\n\r\n                        return (\r\n                            <div className={classes.FeedContainer} key={activity._id} onClick={() => this.modalToggle(activity.expenseID, activity.value)}>\r\n                                <div className={classes.TotalValue}>\r\n                                    <div className={classes.ValueCircle}>{activity.value}$</div>\r\n                                </div>\r\n                                <div className={classes.Feed}>\r\n                                    <p className={classes.Description}>{activity.description}</p>\r\n                                    <p className={DescriptionClasses.join(\" \")}>{activity.subheading}</p>\r\n                                    <p className={classes.Date}>{activity.date}</p>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>);\r\n\r\n            return list;\r\n        }\r\n\r\n        let modal = null;\r\n\r\n\r\n        //All the code will be executed only if modal is open\r\n        if (this.state.modalOpen) {\r\n            let expenseData = this.state.expenseData;\r\n            console.log(this.state.feed);\r\n            console.log(expenseData);\r\n            let { description, to: { userName, _id }, eachContribution, from, deleted, expenseType } = expenseData;\r\n            let totalCost = `$ ${(eachContribution * (from.length + 1)).toFixed(2)}`;\r\n            let totalOwedToMe = (eachContribution * (from.length)).toFixed(2);\r\n            let showDeleteButton = false;\r\n\r\n            if (_id === this.props.userID) {\r\n                userName = `You (${userName})`;\r\n\r\n                if (expenseType === \"expense\")\r\n                    showDeleteButton = true;\r\n            }\r\n\r\n            let expenseHeader = `${userName} ${deleted ? \"deleted expense\" : \"added\"} ${description}`;\r\n\r\n            let deleteButton = null;\r\n            if (showDeleteButton) {\r\n                deleteButton = (<RegularButton\r\n                    text=\"Delete\"\r\n                    disabled={deleted}\r\n                    onClick={async () => {\r\n                        let deleteStatus = (await Axios.delete(`${SplitEaseServerRoutes.SPLIT_EASE_REMOVE_EXPENSE}?expenseID=${expenseData._id}`)).data;\r\n                        // console.log(deleteStatus);\r\n                        if (deleteStatus.Result === \"Success\") {\r\n                            this.modalToggle();\r\n                        }\r\n                    }}\r\n                />\r\n                );\r\n            }\r\n\r\n            modal = (\r\n                <Auxillary>\r\n                    <Backdrop\r\n                        show={this.state.modalOpen}\r\n                        onClick={this.modalToggle}\r\n                    />\r\n\r\n\r\n                    <Modal>\r\n                        <div className={classes.ModalHeader}>\r\n                            <p className={classes.ExpenseHeader}>{expenseHeader}</p>\r\n                            <p className={classes.TotalCost}>{totalCost}</p>\r\n                        </div>\r\n                        <div className={classes.ModalBody}>\r\n                            <p className={classes.ValueBreakdown}> <b>{userName}</b> paid <b>{totalCost}</b> and is owed <b>${totalOwedToMe}</b></p>\r\n                            {from.map(f => {\r\n                                return (\r\n                                    <p className={classes.ValueBreakdown} key={f._id}> <b>{f.userName}</b> owes <b>${eachContribution}</b></p>\r\n                                )\r\n                            })}\r\n                            {deleteButton}\r\n                        </div>\r\n                    </Modal>\r\n                </Auxillary>\r\n            )\r\n        }\r\n\r\n\r\n        return (\r\n            <Auxillary>\r\n                {renderList()}\r\n                {modal}\r\n            </Auxillary>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = state => {\r\n    return {\r\n        userID: state.userID\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, null)(SplitEaseFeed);"]},"metadata":{},"sourceType":"module"}