{"ast":null,"code":"var _jsxFileName = \"E:\\\\Web Dev\\\\React\\\\RoomEase\\\\RoomEase-FrontEnd\\\\src\\\\containers\\\\SplitEase\\\\SplitEase.js\";\nimport React, { Component } from 'react';\nimport classes from './splitease.module.css';\nimport { withLayout } from '../../hoc/Layout/withLayout';\nimport upvote from '../../assets/upvote.png';\nimport downvote from '../../assets/downvote.png';\nimport * as SplitEaseServerRoutes from '../../constants/ServerRoutes';\nimport * as SplitEaseClientRoutes from '../../constants/ClientRoutes';\nimport Axios from 'axios';\nimport { connect } from 'react-redux';\nimport Tabs from '../../components/Tabs/Tabs';\nimport { Route, Link } from 'react-router-dom';\nimport SplitEaseFeed from './SplitEaseFeed/SplitEaseFeed';\nimport SpliteaseExpenses from './SplitEaseExpenses/SplitEaseExpenses';\nimport Auxillary from '../../hoc/Auxillary';\nimport addIcon from '../../assets/addIcon.png';\nimport AddExpense from './AddExpense/AddExpense';\n\nclass SplitEase extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      userID: null,\n      totalBalance: null,\n      visibilityStatus: false\n    };\n\n    this.fetchSplitWiseData = async userID => {\n      let splitWiseModel = await Axios.get(`${SplitEaseServerRoutes.SPLIT_EASE_GET_TOTAL_BALANCE}?userID=${userID}`);\n      let {\n        data: {\n          totalBalance\n        }\n      } = splitWiseModel;\n      this.setState({\n        totalBalance\n      });\n    };\n\n    this.buttonVisibility = () => {\n      let buttonVisible = !this.props.location.pathname.includes(\"addExpense\");\n      if (this.state.visibilityStatus !== buttonVisible) this.changeAddButtonVisibility(buttonVisible);\n    };\n\n    this.changeAddButtonVisibility = visibilityStatus => {\n      this.setState({\n        visibilityStatus\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.buttonVisibility();\n    if (this.props.userID && !this.state.userID) this.setState({\n      userID: this.props.userID\n    }, () => this.fetchSplitWiseData(this.props.userID));\n  }\n\n  componentDidUpdate() {\n    this.buttonVisibility();\n    if (this.props.userID && !this.state.userID) this.setState({\n      userID: this.props.userID\n    }, () => this.fetchSplitWiseData(this.props.userID));\n  }\n\n  render() {\n    const ROUTES = /*#__PURE__*/React.createElement(Auxillary, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: this.props.match.path + SplitEaseClientRoutes.SPLIT_EASE_FEED,\n      component: SplitEaseFeed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: this.props.match.path + SplitEaseClientRoutes.SPLIT_EASE_EXPENSE,\n      component: () => /*#__PURE__*/React.createElement(SpliteaseExpenses, {\n        fetchSplitWiseData: this.fetchSplitWiseData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 34\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: SplitEaseClientRoutes.SPLIT_EASE_ADD_EXPENSE,\n      component: () => /*#__PURE__*/React.createElement(AddExpense, {\n        fetchSplitWiseData: this.fetchSplitWiseData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 34\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }\n    }));\n\n    let renderHeader = () => {\n      let positive = this.state.totalBalance < 0 ? false : true;\n      let SplitWiseStatusTextClasses = [classes.SplitwiseStatusText];\n      let splitWiseImage = null;\n      let statusText = `You are owed $${this.state.totalBalance}`;\n\n      if (positive) {\n        splitWiseImage = upvote;\n        SplitWiseStatusTextClasses.push(classes.SplitwiseStatusTextPositive);\n      } else {\n        statusText = `You owe $${Math.abs(this.state.totalBalance)}`;\n        splitWiseImage = downvote;\n        SplitWiseStatusTextClasses.push(classes.SplitwiseStatusTextNegative);\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.SplitwiseStatus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: splitWiseImage,\n        alt: \"Status\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.SplitwiseHeader,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: classes.SplitwiseText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }\n      }, \"Total Balance\"), /*#__PURE__*/React.createElement(\"p\", {\n        className: SplitWiseStatusTextClasses.join(\" \"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }\n      }, statusText)));\n    };\n\n    let tabsList = [{\n      name: \"Feed\",\n      url: SplitEaseClientRoutes.SPLIT_EASE_FEED\n    }, {\n      name: \"Expenses\",\n      url: SplitEaseClientRoutes.SPLIT_EASE_EXPENSE\n    }];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Tabs, {\n      tabsList: tabsList,\n      url: this.props.match.url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Header,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    }, \"SplitEase\"), this.state.visibilityStatus ? /*#__PURE__*/React.createElement(Link, {\n      to: SplitEaseClientRoutes.SPLIT_EASE_ADD_EXPENSE,\n      style: {\n        textDecoration: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 52\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: addIcon,\n      alt: \"Add task\",\n      className: classes.Icon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 25\n      }\n    })) : null), renderHeader(), ROUTES);\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    userID: state.userID\n  };\n};\n\nexport default connect(mapStateToProps, null)(withLayout(SplitEase));","map":{"version":3,"sources":["E:/Web Dev/React/RoomEase/RoomEase-FrontEnd/src/containers/SplitEase/SplitEase.js"],"names":["React","Component","classes","withLayout","upvote","downvote","SplitEaseServerRoutes","SplitEaseClientRoutes","Axios","connect","Tabs","Route","Link","SplitEaseFeed","SpliteaseExpenses","Auxillary","addIcon","AddExpense","SplitEase","state","userID","totalBalance","visibilityStatus","fetchSplitWiseData","splitWiseModel","get","SPLIT_EASE_GET_TOTAL_BALANCE","data","setState","buttonVisibility","buttonVisible","props","location","pathname","includes","changeAddButtonVisibility","componentDidMount","componentDidUpdate","render","ROUTES","match","path","SPLIT_EASE_FEED","SPLIT_EASE_EXPENSE","SPLIT_EASE_ADD_EXPENSE","renderHeader","positive","SplitWiseStatusTextClasses","SplitwiseStatusText","splitWiseImage","statusText","push","SplitwiseStatusTextPositive","Math","abs","SplitwiseStatusTextNegative","SplitwiseStatus","SplitwiseHeader","SplitwiseText","join","tabsList","name","url","Container","Header","textDecoration","Icon","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport classes from './splitease.module.css';\r\nimport { withLayout } from '../../hoc/Layout/withLayout';\r\nimport upvote from '../../assets/upvote.png';\r\nimport downvote from '../../assets/downvote.png';\r\nimport * as SplitEaseServerRoutes from '../../constants/ServerRoutes'\r\nimport * as SplitEaseClientRoutes from '../../constants/ClientRoutes'\r\nimport Axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport Tabs from '../../components/Tabs/Tabs';\r\n\r\nimport { Route, Link } from 'react-router-dom'\r\nimport SplitEaseFeed from './SplitEaseFeed/SplitEaseFeed';\r\nimport SpliteaseExpenses from './SplitEaseExpenses/SplitEaseExpenses';\r\nimport Auxillary from '../../hoc/Auxillary';\r\nimport addIcon from '../../assets/addIcon.png';\r\nimport AddExpense from './AddExpense/AddExpense'\r\n\r\n\r\nclass SplitEase extends Component {\r\n\r\n    state = {\r\n        userID: null,\r\n        totalBalance: null,\r\n        visibilityStatus: false,\r\n\r\n    }\r\n\r\n    fetchSplitWiseData = async (userID) => {\r\n        let splitWiseModel = (await Axios.get(`${SplitEaseServerRoutes.SPLIT_EASE_GET_TOTAL_BALANCE}?userID=${userID}`));\r\n        let { data: { totalBalance } } = splitWiseModel;\r\n        this.setState({ totalBalance })\r\n    }\r\n\r\n    buttonVisibility = () => {\r\n        let buttonVisible = !this.props.location.pathname.includes(\"addExpense\");\r\n\r\n        if (this.state.visibilityStatus !== buttonVisible)\r\n            this.changeAddButtonVisibility(buttonVisible)\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.buttonVisibility();\r\n        if (this.props.userID && !this.state.userID)\r\n            this.setState({ userID: this.props.userID }, () => this.fetchSplitWiseData(this.props.userID))\r\n    }\r\n\r\n    changeAddButtonVisibility = (visibilityStatus) => {\r\n        this.setState({ visibilityStatus });\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.buttonVisibility();\r\n        if (this.props.userID && !this.state.userID)\r\n            this.setState({ userID: this.props.userID }, () => this.fetchSplitWiseData(this.props.userID))\r\n    }\r\n\r\n    render() {\r\n\r\n        const ROUTES = (<Auxillary>\r\n            <Route path={this.props.match.path + SplitEaseClientRoutes.SPLIT_EASE_FEED} component={SplitEaseFeed} />\r\n            <Route\r\n                path={this.props.match.path + SplitEaseClientRoutes.SPLIT_EASE_EXPENSE}\r\n                component={() => <SpliteaseExpenses fetchSplitWiseData={this.fetchSplitWiseData} />}\r\n            />\r\n            <Route\r\n                path={SplitEaseClientRoutes.SPLIT_EASE_ADD_EXPENSE}\r\n                component={() => <AddExpense fetchSplitWiseData={this.fetchSplitWiseData} />}\r\n            />\r\n\r\n        </Auxillary>);\r\n\r\n        let renderHeader = () => {\r\n            let positive = this.state.totalBalance < 0 ? false : true;\r\n            let SplitWiseStatusTextClasses = [classes.SplitwiseStatusText];\r\n            let splitWiseImage = null;\r\n            let statusText = `You are owed $${this.state.totalBalance}`;\r\n\r\n            if (positive) {\r\n                splitWiseImage = upvote;\r\n                SplitWiseStatusTextClasses.push(classes.SplitwiseStatusTextPositive);\r\n            }\r\n            else {\r\n\r\n                statusText = `You owe $${Math.abs(this.state.totalBalance)}`\r\n\r\n                splitWiseImage = downvote\r\n                SplitWiseStatusTextClasses.push(classes.SplitwiseStatusTextNegative);\r\n            }\r\n\r\n            return (\r\n                <div className={classes.SplitwiseStatus}>\r\n                    <img src={splitWiseImage} alt=\"Status\" />\r\n                    <div className={classes.SplitwiseHeader}>\r\n                        <p className={classes.SplitwiseText}>Total Balance</p>\r\n                        <p className={SplitWiseStatusTextClasses.join(\" \")}>{statusText}</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        let tabsList = [\r\n            { name: \"Feed\", url: SplitEaseClientRoutes.SPLIT_EASE_FEED },\r\n            { name: \"Expenses\", url: SplitEaseClientRoutes.SPLIT_EASE_EXPENSE }\r\n        ]\r\n\r\n        return (\r\n            <div className={classes.Container}>\r\n                <Tabs tabsList={tabsList} url={this.props.match.url} />\r\n\r\n                <div className={classes.Header}>\r\n                    <h1>SplitEase</h1>\r\n                    {this.state.visibilityStatus ? <Link to={SplitEaseClientRoutes.SPLIT_EASE_ADD_EXPENSE} style={{ textDecoration: \"none\" }}>\r\n                        <img src={addIcon} alt={\"Add task\"} className={classes.Icon} />\r\n                    </Link> : null}\r\n                </div>\r\n                {renderHeader()}\r\n                {ROUTES}\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nlet mapStateToProps = state => {\r\n    return {\r\n        userID: state.userID\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(withLayout(SplitEase));"]},"metadata":{},"sourceType":"module"}