{"ast":null,"code":"var _jsxFileName = \"E:\\\\Web Dev\\\\React\\\\RoomEase\\\\RoomEase-FrontEnd\\\\src\\\\containers\\\\Room\\\\Room.js\";\nimport React, { Component } from 'react';\nimport * as classes from './room.module.css';\nimport TextInput from '../../components/inputs/TextInput';\nimport RegularButton from '../../components/inputs/RegularButton';\nimport { connect } from 'react-redux';\nimport { CHECK_AUTH_STATE, CLEAR_USER_ROOM } from '../../store/Actions/ActionConstants';\nimport Axios from 'axios';\nimport { LEAVE_ROOM_URL, ROOM_ADD_URL, MEMBERS_OF_ROOM_URL } from '../../constants/ServerRoutes';\nimport { ROOM_JOIN_URL } from '../../constants/ClientRoutes';\nimport ErrorMessage from '../../components/inputs/ErrorMessage';\nimport Snackbar from '../../components/inputs/Snackbar';\n\nclass Room extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      userToAdd: \"\",\n      error: \"\",\n      snackbarMessage: \"\",\n      roomMembers: []\n    };\n\n    this.leaveRoomHandler = async () => {\n      let {\n        userID,\n        roomName\n      } = this.props;\n      let obj = {\n        userID: userID,\n        roomName: roomName\n      };\n      let leaveRoomStats = (await Axios.post(LEAVE_ROOM_URL, obj)).data;\n\n      if (leaveRoomStats.Result === \"Success\") {\n        this.props.clearUserRoom();\n        this.props.history.push(ROOM_JOIN_URL);\n      } else console.log(\"Something went wrong\");\n    };\n\n    this.addUserToRoomHandler = async () => {\n      let roomName = this.props.roomName;\n      let userName = this.state.userToAdd;\n\n      if (userName.toString().length === 0) {\n        this.setState({\n          error: \"Username cannot be empty\"\n        });\n        return;\n      }\n\n      let addUserToRoomResponse = (await Axios.post(ROOM_ADD_URL, {\n        userName: userName,\n        roomName: roomName\n      })).data;\n\n      if (addUserToRoomResponse['Result'] === \"Success\") {\n        this.setState({\n          snackbarMessage: \"User Added Successfully\"\n        });\n      } else {\n        this.setState({\n          error: addUserToRoomResponse['Error']\n        });\n      }\n    };\n\n    this.onUserChangedHandler = event => {\n      this.setState({\n        userToAdd: event.target.value\n      });\n    };\n\n    this.getAllMembers = async () => {\n      let roomName = this.props.match.params.roomName;\n      let roomMembers = (await Axios.get(`${MEMBERS_OF_ROOM_URL}?roomname=${roomName}`)).data;\n\n      if (roomMembers.Result === \"Success\") {\n        this.setState({\n          roomMembers: roomMembers.Members\n        });\n      } else {\n        console.log(\"Something went wrong while fetching\");\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.getAllMembers();\n  }\n\n  render() {\n    let button = null;\n\n    if (this.props.userID != null) {\n      button = /*#__PURE__*/React.createElement(\"input\", {\n        value: \"Leave Room\",\n        type: \"button\",\n        className: classes.LeaveRoomButton,\n        onClick: this.leaveRoomHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 23\n        }\n      });\n    }\n\n    let roomName = \"\";\n    if (this.props.roomName) roomName = this.props.roomName;\n\n    let parseAndRenderRoommates = () => {\n      if (this.state.roomMembers.length > 0) {\n        let roomMatesList = /*#__PURE__*/React.createElement(\"div\", {\n          className: classes.RoomMembers,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 21\n          }\n        }, this.state.roomMembers.map(roomMember => {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            key: roomMember._id,\n            className: classes.MemberBox,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 33\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 37\n            }\n          }, \"Name : \", /*#__PURE__*/React.createElement(\"b\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 47\n            }\n          }, roomMember.userName)), /*#__PURE__*/React.createElement(\"span\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 37\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 43\n            }\n          }, \"Email : \", /*#__PURE__*/React.createElement(\"b\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 54\n            }\n          }, roomMember.email))));\n        }));\n        return roomMatesList;\n      } else return null;\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.LeaveRoom,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }\n    }, \"Room: \", /*#__PURE__*/React.createElement(\"u\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 31\n      }\n    }, roomName)), button), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Add,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TextInput, {\n      hint: \"Enter Username to add to room\",\n      value: this.state.userToAdd,\n      onChange: this.onUserChangedHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(ErrorMessage, {\n      message: this.state.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Snackbar, {\n      message: this.state.snackbarMessage,\n      hideMessage: () => this.setState({\n        snackbarMessage: \"\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(RegularButton, {\n      text: \"Add\",\n      onClick: this.addUserToRoomHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }\n    }, \"Your Roomies\"), parseAndRenderRoommates());\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    roomName: state.roomName,\n    userID: state.userID\n  };\n};\n\nlet mapDispatchToProps = dispatch => {\n  return {\n    checkAuthState: () => dispatch({\n      type: CHECK_AUTH_STATE\n    }),\n    clearUserRoom: () => dispatch({\n      type: CLEAR_USER_ROOM\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Room);","map":{"version":3,"sources":["E:/Web Dev/React/RoomEase/RoomEase-FrontEnd/src/containers/Room/Room.js"],"names":["React","Component","classes","TextInput","RegularButton","connect","CHECK_AUTH_STATE","CLEAR_USER_ROOM","Axios","LEAVE_ROOM_URL","ROOM_ADD_URL","MEMBERS_OF_ROOM_URL","ROOM_JOIN_URL","ErrorMessage","Snackbar","Room","state","userToAdd","error","snackbarMessage","roomMembers","leaveRoomHandler","userID","roomName","props","obj","leaveRoomStats","post","data","Result","clearUserRoom","history","push","console","log","addUserToRoomHandler","userName","toString","length","setState","addUserToRoomResponse","onUserChangedHandler","event","target","value","getAllMembers","match","params","get","Members","componentDidMount","render","button","LeaveRoomButton","parseAndRenderRoommates","roomMatesList","RoomMembers","map","roomMember","_id","MemberBox","email","Container","LeaveRoom","Add","mapStateToProps","mapDispatchToProps","dispatch","checkAuthState","type"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport * as classes from './room.module.css';\r\nimport TextInput from '../../components/inputs/TextInput';\r\nimport RegularButton from '../../components/inputs/RegularButton';\r\nimport { connect } from 'react-redux';\r\nimport { CHECK_AUTH_STATE, CLEAR_USER_ROOM } from '../../store/Actions/ActionConstants'\r\nimport Axios from 'axios'\r\nimport { LEAVE_ROOM_URL, ROOM_ADD_URL, MEMBERS_OF_ROOM_URL } from '../../constants/ServerRoutes'\r\nimport { ROOM_JOIN_URL } from '../../constants/ClientRoutes'\r\nimport ErrorMessage from '../../components/inputs/ErrorMessage';\r\n\r\nimport Snackbar from '../../components/inputs/Snackbar';\r\n\r\nclass Room extends Component {\r\n    state = {\r\n        userToAdd: \"\",\r\n        error: \"\",\r\n        snackbarMessage: \"\",\r\n        roomMembers: []\r\n    }\r\n\r\n\r\n    leaveRoomHandler = async () => {\r\n        let { userID, roomName } = this.props\r\n        let obj = { userID: userID, roomName: roomName };\r\n        let leaveRoomStats = (await Axios.post(LEAVE_ROOM_URL, obj)).data;\r\n        if (leaveRoomStats.Result === \"Success\") {\r\n            this.props.clearUserRoom();\r\n            this.props.history.push(ROOM_JOIN_URL);\r\n        }\r\n        else\r\n            console.log(\"Something went wrong\");\r\n\r\n    }\r\n\r\n    addUserToRoomHandler = async () => {\r\n        let roomName = this.props.roomName;\r\n        let userName = this.state.userToAdd;\r\n\r\n        if (userName.toString().length === 0) {\r\n            this.setState({ error: \"Username cannot be empty\" })\r\n            return\r\n        }\r\n\r\n        let addUserToRoomResponse = (await Axios.post(ROOM_ADD_URL, { userName: userName, roomName: roomName })).data;\r\n\r\n        if (addUserToRoomResponse['Result'] === \"Success\") {\r\n            this.setState({ snackbarMessage: \"User Added Successfully\" })\r\n        } else {\r\n            this.setState({ error: addUserToRoomResponse['Error'] })\r\n        }\r\n    }\r\n\r\n    onUserChangedHandler = (event) => {\r\n        this.setState({ userToAdd: event.target.value })\r\n    }\r\n\r\n    getAllMembers = async () => {\r\n        let roomName = this.props.match.params.roomName\r\n        let roomMembers = (await Axios.get(`${MEMBERS_OF_ROOM_URL}?roomname=${roomName}`)).data;\r\n\r\n        if (roomMembers.Result === \"Success\") {\r\n            this.setState({ roomMembers: roomMembers.Members })\r\n        } else {\r\n            console.log(\"Something went wrong while fetching\");\r\n        }\r\n\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getAllMembers();\r\n    }\r\n\r\n    render() {\r\n        let button = null;\r\n\r\n        if (this.props.userID != null) {\r\n            button = (<input\r\n                value=\"Leave Room\"\r\n                type=\"button\"\r\n                className={classes.LeaveRoomButton}\r\n                onClick={this.leaveRoomHandler}\r\n            />)\r\n        }\r\n\r\n        let roomName = \"\";\r\n\r\n        if (this.props.roomName)\r\n            roomName = this.props.roomName;\r\n\r\n\r\n        let parseAndRenderRoommates = () => {\r\n            if (this.state.roomMembers.length > 0) {\r\n                let roomMatesList = (\r\n                    <div className={classes.RoomMembers}>\r\n                        {this.state.roomMembers.map(roomMember => {\r\n                            return (\r\n                                <div key={roomMember._id} className={classes.MemberBox}>\r\n                                    <p>Name : <b>{roomMember.userName}</b></p>\r\n                                    <span><p>Email : <b>{roomMember.email}</b></p></span>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                );\r\n                return roomMatesList;\r\n            }\r\n            else return null;\r\n        }\r\n\r\n\r\n\r\n        return (\r\n            <div className={classes.Container}>\r\n                <div className={classes.LeaveRoom}>\r\n                    <h1>Room: <u>{roomName}</u></h1>\r\n                    {button}\r\n                </div>\r\n                <div className={classes.Add}>\r\n                    <TextInput\r\n                        hint={\"Enter Username to add to room\"}\r\n                        value={this.state.userToAdd}\r\n                        onChange={this.onUserChangedHandler}\r\n                    />\r\n                    <ErrorMessage message={this.state.error} />\r\n                    <Snackbar message={this.state.snackbarMessage} hideMessage={() => this.setState({ snackbarMessage: \"\" })} />\r\n                    <RegularButton\r\n                        text=\"Add\"\r\n                        onClick={this.addUserToRoomHandler}\r\n                    />\r\n                </div>\r\n                <h2>Your Roomies</h2>\r\n                {parseAndRenderRoommates()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = state => {\r\n    return {\r\n        roomName: state.roomName,\r\n        userID: state.userID,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = dispatch => {\r\n    return {\r\n        checkAuthState: () => dispatch({ type: CHECK_AUTH_STATE }),\r\n        clearUserRoom: () => dispatch({ type: CLEAR_USER_ROOM }),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Room);\r\n"]},"metadata":{},"sourceType":"module"}