{"ast":null,"code":"var _jsxFileName = \"E:\\\\Web Dev\\\\React\\\\RoomEase\\\\RoomEase-FrontEnd\\\\src\\\\containers\\\\Chat\\\\Chat.js\";\nimport React, { Component } from 'react';\nimport * as classes from './chat.module.css';\nimport { BASE_URL, CHAT_URL } from '../../constants/ServerRoutes';\nimport TextInput from '../../components/inputs/TextInput';\nimport RegularButton from '../../components/inputs/RegularButton';\nimport profileIcon from '../../assets/profile.png';\nimport Axios from 'axios';\n\nconst io = require('socket.io-client');\n\nclass Chat extends Component {\n  constructor(...args) {\n    super(...args);\n    this.socket = null;\n    this.timeout = 0;\n    this.state = {\n      roomName: this.props.match.params.roomName,\n      message: \"\",\n      chatMessages: [],\n      promptMessage: \"\",\n      loading: false\n    };\n\n    this.fetchOldMessages = async () => {\n      let chatData = (await Axios.get(`${CHAT_URL}?roomname=${this.state.roomName}`)).data;\n      let Chat = chatData.Chat;\n      let chatMessages = [...this.state.chatMessages];\n      chatMessages.push(...Chat);\n      await this.setState({\n        chatMessages\n      });\n      this.messagesEnd.scrollIntoView({\n        behavior: \"auto\"\n      });\n      this.connectToServer();\n    };\n\n    this.connectToServer = async () => {\n      this.socket = io.connect(`${BASE_URL}?room=${this.state.roomName}&userid=${localStorage.getItem('userID')}`);\n      this.socket.on('roomMessage', data => {\n        let chatMessages = [...this.state.chatMessages];\n        chatMessages.push(data);\n        this.setState({\n          chatMessages\n        }, () => {\n          this.messagesEnd.scrollIntoView({\n            behavior: \"smooth\"\n          });\n        });\n      });\n      this.socket.on('chatMessage', data => {\n        let chatMessages = [...this.state.chatMessages];\n        chatMessages.push(data);\n        this.setState({\n          chatMessages\n        }, () => {\n          this.messagesEnd.scrollIntoView({\n            behavior: \"smooth\"\n          });\n        });\n      });\n      this.socket.on('promptMessage', data => {\n        if (data.id !== localStorage.getItem('userID')) this.setState({\n          promptMessage: data.message\n        });\n      });\n    };\n\n    this.changedChatMessage = event => {\n      let data = {\n        id: localStorage.getItem('userID'),\n        room: this.state.roomName\n      };\n      this.socket.emit('typing', data);\n      if (this.timeout) clearTimeout(this.timeout);\n      this.timeout = setTimeout(data => {\n        this.socket.emit('stop_typing', data);\n      }, 1000, data);\n      let message = event.target.value;\n      this.setState({\n        message\n      });\n    };\n\n    this.sendChatMessage = async () => {\n      let data = {\n        room: this.state.roomName,\n        id: localStorage.getItem('userID'),\n        message: this.state.message\n      };\n      await this.socket.emit('message', data);\n      this.setState({\n        message: \"\"\n      });\n    };\n  }\n\n  componentWillUnmount() {\n    this.messagesEnd = null;\n    this.socket.disconnect();\n    this.socket = null;\n  }\n\n  componentDidMount() {\n    this.fetchOldMessages();\n    this.messageInput.focus();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }\n    }, \"Chats of \", this.state.roomName), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.chatFrame,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }\n    }, this.state.chatMessages.map(message => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: message.messageID,\n        className: classes.ChatMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.userProfile,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: profileIcon,\n        alt: \"Profile Icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 74\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.MessageData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: classes.MessageSender,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 41\n        }\n      }, message.sender, \" \", /*#__PURE__*/React.createElement(\"span\", {\n        className: classes.MessageTime,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 95\n        }\n      }, message.messageTime)), /*#__PURE__*/React.createElement(\"p\", {\n        className: classes.MessageText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 41\n        }\n      }, message.text)));\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        float: \"left\",\n        clear: \"both\"\n      },\n      ref: el => {\n        this.messagesEnd = el;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }\n    }, this.state.promptMessage), /*#__PURE__*/React.createElement(TextInput, {\n      hint: \"Send a message...\",\n      onChange: this.changedChatMessage,\n      value: this.state.message,\n      onKeyDown: e => {\n        if (e.key === \"Enter\") this.sendChatMessage();\n      },\n      reference: input => {\n        this.messageInput = input;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(RegularButton, {\n      text: \"Send\",\n      onClick: this.sendChatMessage,\n      disabled: this.state.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default Chat;","map":{"version":3,"sources":["E:/Web Dev/React/RoomEase/RoomEase-FrontEnd/src/containers/Chat/Chat.js"],"names":["React","Component","classes","BASE_URL","CHAT_URL","TextInput","RegularButton","profileIcon","Axios","io","require","Chat","socket","timeout","state","roomName","props","match","params","message","chatMessages","promptMessage","loading","fetchOldMessages","chatData","get","data","push","setState","messagesEnd","scrollIntoView","behavior","connectToServer","connect","localStorage","getItem","on","id","changedChatMessage","event","room","emit","clearTimeout","setTimeout","target","value","sendChatMessage","componentWillUnmount","disconnect","componentDidMount","messageInput","focus","render","Container","chatFrame","map","messageID","ChatMessage","userProfile","MessageData","MessageSender","sender","MessageTime","messageTime","MessageText","text","float","clear","el","e","key","input"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport * as classes from './chat.module.css';\r\nimport { BASE_URL, CHAT_URL } from '../../constants/ServerRoutes'\r\nimport TextInput from '../../components/inputs/TextInput';\r\nimport RegularButton from '../../components/inputs/RegularButton';\r\nimport profileIcon from '../../assets/profile.png';\r\nimport Axios from 'axios';\r\n\r\nconst io = require('socket.io-client');\r\n\r\n\r\nclass Chat extends Component {\r\n    socket = null;\r\n    timeout = 0;\r\n\r\n    state = {\r\n        roomName: this.props.match.params.roomName,\r\n        message: \"\",\r\n        chatMessages: [],\r\n        promptMessage: \"\",\r\n        loading: false,\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.messagesEnd = null;\r\n        this.socket.disconnect();\r\n        this.socket = null;\r\n    }\r\n\r\n    fetchOldMessages = async () => {\r\n        let chatData = (await Axios.get(`${CHAT_URL}?roomname=${this.state.roomName}`)).data;\r\n\r\n        let Chat = chatData.Chat;\r\n        let chatMessages = [...this.state.chatMessages];\r\n        chatMessages.push(...Chat);\r\n\r\n        await this.setState({ chatMessages })\r\n        this.messagesEnd.scrollIntoView({ behavior: \"auto\" });\r\n        this.connectToServer();\r\n    }\r\n\r\n    connectToServer = async () => {\r\n\r\n        this.socket = io.connect(`${BASE_URL}?room=${this.state.roomName}&userid=${localStorage.getItem('userID')}`);\r\n\r\n        this.socket.on('roomMessage', (data) => {\r\n            let chatMessages = [...this.state.chatMessages];\r\n            chatMessages.push(data);\r\n            this.setState({ chatMessages }, () => {\r\n                this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\r\n            })\r\n        })\r\n\r\n\r\n        this.socket.on('chatMessage', (data) => {\r\n            let chatMessages = [...this.state.chatMessages];\r\n            chatMessages.push(data);\r\n            this.setState({ chatMessages }, () => {\r\n                this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\r\n            })\r\n        })\r\n\r\n        this.socket.on('promptMessage', (data) => {\r\n            if (data.id !== localStorage.getItem('userID'))\r\n                this.setState({ promptMessage: data.message })\r\n        })\r\n\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.fetchOldMessages();\r\n        this.messageInput.focus();\r\n    }\r\n\r\n    changedChatMessage = (event) => {\r\n        let data = { id: localStorage.getItem('userID'), room: this.state.roomName }\r\n        this.socket.emit('typing', data);\r\n\r\n        if (this.timeout) clearTimeout(this.timeout);\r\n\r\n        this.timeout = setTimeout((data) => {\r\n            this.socket.emit('stop_typing', data);\r\n        }, 1000, data);\r\n\r\n        let message = event.target.value;\r\n        this.setState({ message })\r\n    }\r\n\r\n    sendChatMessage = async () => {\r\n\r\n        let data = {\r\n            room: this.state.roomName,\r\n            id: localStorage.getItem('userID'),\r\n            message: this.state.message,\r\n        }\r\n        await this.socket.emit('message', data);\r\n        this.setState({\r\n            message: \"\"\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className={classes.Container}>\r\n\r\n                <h1>Chats of {this.state.roomName}</h1>\r\n                <div className={classes.chatFrame}>\r\n                    <div>\r\n                        {this.state.chatMessages.map(message => {\r\n                            return (\r\n                                <div key={message.messageID} className={classes.ChatMessage}>\r\n                                    <div className={classes.userProfile}><img src={profileIcon} alt={\"Profile Icon\"}></img></div>\r\n                                    <div className={classes.MessageData}>\r\n                                        <p className={classes.MessageSender}>{message.sender} <span className={classes.MessageTime}>{message.messageTime}</span></p>\r\n                                        <p className={classes.MessageText}>{message.text}</p>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n\r\n                    <div style={{ float: \"left\", clear: \"both\" }}\r\n                        ref={(el) => { this.messagesEnd = el; }}>\r\n                    </div>\r\n                </div>\r\n                <p>{this.state.promptMessage}</p>\r\n                <TextInput\r\n                    hint=\"Send a message...\"\r\n                    onChange={this.changedChatMessage}\r\n                    value={this.state.message}\r\n                    onKeyDown={(e) => {\r\n                        if (e.key === \"Enter\")\r\n                            this.sendChatMessage();\r\n                    }}\r\n                    reference={(input) => {\r\n                        this.messageInput = input;\r\n                    }}\r\n                ></TextInput>\r\n                <RegularButton\r\n                    text={\"Send\"}\r\n                    onClick={this.sendChatMessage}\r\n                    disabled={this.state.loading}\r\n                ></RegularButton>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default Chat;"]},"metadata":{},"sourceType":"module"}