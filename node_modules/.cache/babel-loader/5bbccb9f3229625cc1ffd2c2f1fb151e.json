{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport React from 'react';\nimport * as PropTypes from 'prop-types';\nimport Hotkeys from 'hotkeys-js';\n\nvar ReactHotkeys = /*#__PURE__*/function (_React$Component) {\n  _inherits(ReactHotkeys, _React$Component);\n\n  var _super = _createSuper(ReactHotkeys);\n\n  function ReactHotkeys(props) {\n    var _this;\n\n    _classCallCheck(this, ReactHotkeys);\n\n    _this = _super.call(this, props);\n    _this.isKeyDown = false;\n    _this.handle = void 0;\n    _this.onKeyDown = _this.onKeyDown.bind(_assertThisInitialized(_this));\n    _this.onKeyUp = _this.onKeyUp.bind(_assertThisInitialized(_this));\n    _this.handleKeyUpEvent = _this.handleKeyUpEvent.bind(_assertThisInitialized(_this));\n    _this.handle = {};\n    return _this;\n  }\n\n  _createClass(ReactHotkeys, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          filter = _this$props.filter,\n          splitKey = _this$props.splitKey;\n\n      if (filter) {\n        Hotkeys.filter = filter;\n      }\n\n      Hotkeys.unbind(this.props.keyName);\n      Hotkeys(this.props.keyName, {\n        splitKey: splitKey\n      }, this.onKeyDown);\n      document && document.body.addEventListener('keyup', this.handleKeyUpEvent);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      Hotkeys.unbind(this.props.keyName);\n      this.isKeyDown = true;\n      this.handle = {};\n      document && document.body.removeEventListener('keyup', this.handleKeyUpEvent);\n    }\n  }, {\n    key: \"onKeyUp\",\n    value: function onKeyUp(e, handle) {\n      var _this$props2 = this.props,\n          onKeyUp = _this$props2.onKeyUp,\n          disabled = _this$props2.disabled;\n      !disabled && onKeyUp && onKeyUp(handle.shortcut, e, handle);\n    }\n  }, {\n    key: \"onKeyDown\",\n    value: function onKeyDown(e, handle) {\n      var _this$props3 = this.props,\n          onKeyDown = _this$props3.onKeyDown,\n          allowRepeat = _this$props3.allowRepeat,\n          disabled = _this$props3.disabled;\n      if (this.isKeyDown && !allowRepeat) return;\n      this.isKeyDown = true;\n      this.handle = handle;\n      !disabled && onKeyDown && onKeyDown(handle.shortcut, e, handle);\n    }\n  }, {\n    key: \"handleKeyUpEvent\",\n    value: function handleKeyUpEvent(e) {\n      if (!this.isKeyDown) return;\n      this.isKeyDown = false;\n      if (this.props.keyName && this.props.keyName.indexOf(this.handle.shortcut) < 0) return;\n      this.onKeyUp(e, this.handle);\n      this.handle = {};\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.props.children || null;\n    }\n  }]);\n\n  return ReactHotkeys;\n}(React.Component);\n\nReactHotkeys.defaultProps = {\n  filter: function filter(event) {\n    var target = event.target || event.srcElement;\n    var tagName = target.tagName;\n    return !(target.isContentEditable || tagName === 'INPUT' || tagName === 'SELECT' || tagName === 'TEXTAREA');\n  }\n};\nReactHotkeys.propTypes = {\n  keyName: PropTypes.string,\n  filter: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onKeyUp: PropTypes.func,\n  disabled: PropTypes.bool,\n  splitKey: PropTypes.string\n};\nexport { ReactHotkeys as default };","map":{"version":3,"sources":["../../src/index.tsx"],"names":["ReactHotkeys","React","Component","defaultProps","filter","target","event","tagName","propTypes","keyName","PropTypes","onKeyDown","onKeyUp","disabled","splitKey","string","isKeyDown","handle","Hotkeys","document","e","allowRepeat"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as PropTypes from 'prop-types';\nimport Hotkeys, { HotkeysEvent } from 'hotkeys-js';\n\nexport type OnKeyFun = (shortcut: string, evn: KeyboardEvent, handle: HotkeysEvent) => void;\n\nexport interface IReactHotkeysProps {\n  keyName?: string;\n  filter?: (event: KeyboardEvent) => boolean;\n  onKeyUp?: OnKeyFun;\n  onKeyDown?: OnKeyFun;\n  allowRepeat?: boolean;\n  disabled?: boolean;\n  splitKey?: string;\n}\n\nexport default class ReactHotkeys extends React.Component<IReactHotkeysProps> {\n  public static defaultProps: IReactHotkeysProps = {\n    filter(event: KeyboardEvent) {\n      const target = (event.target as HTMLElement) || event.srcElement;\n      var tagName = target.tagName;\n      return !(target.isContentEditable || tagName === 'INPUT' || tagName === 'SELECT' || tagName === 'TEXTAREA');\n    },\n  }\n  static propTypes = {\n    keyName: PropTypes.string,\n    filter: PropTypes.func,\n    onKeyDown: PropTypes.func,\n    onKeyUp: PropTypes.func,\n    disabled: PropTypes.bool,\n    splitKey: PropTypes.string\n  }\n  private isKeyDown: boolean = false;\n  private handle: HotkeysEvent;\n  constructor(props: IReactHotkeysProps) {\n    super(props);\n    this.onKeyDown = this.onKeyDown.bind(this);\n    this.onKeyUp = this.onKeyUp.bind(this);\n    this.handleKeyUpEvent = this.handleKeyUpEvent.bind(this);\n    this.handle = {} as HotkeysEvent;\n  }\n  componentDidMount() {\n    const { filter, splitKey } = this.props;\n    if (filter) {\n      Hotkeys.filter = filter;\n    }\n    Hotkeys.unbind(this.props.keyName as string);\n    Hotkeys(this.props.keyName as string, { splitKey }, this.onKeyDown);\n    document && document.body.addEventListener('keyup', this.handleKeyUpEvent);\n  }\n  componentWillUnmount() {\n    Hotkeys.unbind(this.props.keyName as string);\n    this.isKeyDown = true;\n    this.handle = {} as HotkeysEvent;\n    document && document.body.removeEventListener('keyup', this.handleKeyUpEvent);\n  }\n  onKeyUp(e: KeyboardEvent, handle: HotkeysEvent) {\n    const { onKeyUp, disabled } = this.props;\n    !disabled && onKeyUp && onKeyUp(handle.shortcut, e, handle)\n  }\n  onKeyDown(e: KeyboardEvent, handle: HotkeysEvent) {\n    const { onKeyDown, allowRepeat, disabled } = this.props;\n    if (this.isKeyDown && !allowRepeat) return;\n    this.isKeyDown = true;\n    this.handle = handle;\n    !disabled && onKeyDown && onKeyDown(handle.shortcut, e, handle)\n  }\n  handleKeyUpEvent(e: KeyboardEvent) {\n    if (!this.isKeyDown) return;\n    this.isKeyDown = false;\n    if (this.props.keyName && this.props.keyName.indexOf(this.handle.shortcut) < 0) return;\n    this.onKeyUp(e, this.handle);\n    this.handle = {} as HotkeysEvent;\n  }\n  render() {\n    return this.props.children || null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}