{"ast":null,"code":"var _jsxFileName = \"E:\\\\Web Dev\\\\React\\\\RoomEase\\\\RoomEase-FrontEnd\\\\src\\\\containers\\\\Tasks\\\\CreateTask\\\\CreateTask.js\";\nimport React, { Component } from 'react';\nimport * as classes from './createtask.module.css';\nimport TextInput from '../../../components/inputs/TextInput';\nimport { connect } from 'react-redux';\nimport { MEMBERS_OF_ROOM_URL, TASK_CREATE_URL } from '../../../constants/ServerRoutes';\nimport { CHECK_AUTH_STATE } from '../../../store/Actions/ActionConstants';\nimport Axios from 'axios';\nimport RegularButton from '../../../components/inputs/RegularButton';\nimport TaskInfoSelect from '../../../components/TaskInfoSelect/TaskInfoSelect';\nimport TimeInput from '../../../components/inputs/TimeInput';\nimport MemberSelect from '../../../components/inputs/MemberSelect';\n\nclass CreateTask extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      taskName: \"\",\n      comments: \"\",\n      columns: {\n        daysOfTheWeek: [],\n        timeOfDay: \"\",\n        users: []\n      },\n      roomName: null,\n      userID: null,\n      members: [],\n      error: \"\",\n      selectedUser: \"\",\n      timePeriod: \"AM\",\n      hours: \"\",\n      minutes: \"\"\n    };\n\n    this.fetchAndUpdateUsersOfRoom = async roomName => {\n      try {\n        let url = MEMBERS_OF_ROOM_URL + \"?roomname=\" + roomName;\n        let members = (await Axios.get(url)).data.Members;\n        this.setState({\n          members,\n          selectedUser: members[0].userName\n        });\n      } catch (err) {\n        this.setState({\n          error: err.message\n        });\n      }\n    };\n\n    this.updateRoomName = prevProps => {\n      let setAndUpdate = roomName => {\n        this.setState({\n          roomName: roomName\n        });\n        this.fetchAndUpdateUsersOfRoom(roomName);\n      };\n\n      if (this.props.roomName != null && this.state.roomName === null) setAndUpdate(this.props.roomName);else if (prevProps != null && prevProps.roomName !== null && this.state.roomName === null) setAndUpdate(prevProps.roomName);\n    };\n\n    this.taskNameChangedHandler = (event, type) => {\n      let value = event.target.value;\n      this.setState({\n        taskName: value\n      });\n    };\n\n    this.taskCommentsChangedHandler = (event, type) => {\n      let value = event.target.value;\n      this.setState({\n        comments: value\n      });\n    };\n\n    this.daySelected = day => {\n      let columns = { ...this.state.columns\n      };\n      let daysOfTheWeek = [...columns.daysOfTheWeek];\n\n      if (daysOfTheWeek.includes(day)) {\n        daysOfTheWeek.splice(daysOfTheWeek.indexOf(day), 1);\n      } else {\n        daysOfTheWeek.push(day);\n      }\n\n      columns.daysOfTheWeek = daysOfTheWeek;\n      this.setState({\n        columns\n      });\n    };\n\n    this.changedTime = (time, type) => {\n      if (type === \"hours\") {\n        this.setState({\n          hours: time\n        });\n      } else {\n        this.setState({\n          minutes: time\n        });\n      }\n    };\n\n    this.changedtimePeriod = timePeriod => {\n      this.setState({\n        timePeriod: timePeriod\n      });\n    };\n\n    this.addToList = userName => {\n      let columns = { ...this.state.columns\n      };\n      let users = [...columns.users];\n      let user = this.state.members.filter(member => member.userName === userName)[0];\n      users.push(user);\n      columns.users = users;\n      let members = [...this.state.members];\n      members = members.filter(member => member.userName !== userName);\n      let selectedUser = members.length > 0 ? members[0].userName : \"\";\n      this.setState({\n        columns,\n        members,\n        selectedUser\n      });\n    };\n\n    this.removeFromList = userName => {\n      let columns = { ...this.state.columns\n      };\n      let users = [...columns.users];\n      let user = users.filter(member => member.userName === userName)[0];\n      users = users.filter(member => member.userName !== userName);\n      columns.users = users;\n      let members = [...this.state.members];\n      members.push(user);\n      let selectedUser = members[0].userName;\n      this.setState({\n        columns,\n        members,\n        selectedUser\n      });\n    };\n\n    this.selectUserFromDropdown = event => {\n      let selectedUser = event.target.value;\n      this.setState({\n        selectedUser\n      });\n    };\n\n    this.submittedCreateTask = async () => {\n      const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n      let createdOn = new Date();\n      createdOn = `${monthNames[createdOn.getMonth()]} ${createdOn.getDate()} ${createdOn.getFullYear()}`;\n      let columns = {};\n      columns.daysOfTheWeek = this.state.columns.daysOfTheWeek;\n      columns.users = this.state.columns.users;\n      columns.timeOfDay = `${this.state.hours}:${this.state.minutes} ${this.state.timePeriod}`;\n      let taskModel = {\n        createdOn: createdOn,\n        taskName: this.state.taskName,\n        comments: this.state.comments,\n        columns: columns,\n        roomName: this.state.roomName,\n        userID: this.state.userID\n      };\n      let taskCreationStatus = (await Axios.post(TASK_CREATE_URL, taskModel)).data;\n      if (taskCreationStatus.Result === \"Success\") this.props.history.goBack();else console.log(taskCreationStatus);\n    };\n  }\n\n  componentDidMount() {\n    this.props.checkAuthState();\n    this.updateRoomName();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this.updateRoomName(prevProps);\n\n    if (this.props.userID !== this.state.userID && this.state.userID === null) {\n      this.setState({\n        userID: this.props.userID\n      });\n    }\n  }\n\n  render() {\n    let members = null;\n\n    if (this.state.roomName) {\n      members = /*#__PURE__*/React.createElement(MemberSelect, {\n        potentialUsers: this.state.members,\n        addToList: this.addToList,\n        addedUsers: this.state.columns.users,\n        selectedUser: this.state.selectedUser,\n        selectUserFromDropdown: this.selectUserFromDropdown,\n        removeFromList: this.removeFromList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 24\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Form,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }\n    }, \"Create Task\"), /*#__PURE__*/React.createElement(TextInput, {\n      onChange: this.taskNameChangedHandler,\n      type: \"text\",\n      hint: \"Task Name\",\n      value: this.state.taskName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(TextInput, {\n      onChange: this.taskCommentsChangedHandler,\n      type: \"textarea\",\n      hint: \"Comments\",\n      value: this.state.comments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(TaskInfoSelect, {\n      days: this.state.columns.daysOfTheWeek,\n      daySelected: this.daySelected,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(TimeInput, {\n      changedTime: this.changedTime,\n      timePeriod: this.state.timePeriod,\n      changedtimePeriod: this.changedtimePeriod,\n      hours: `${this.state.hours}`,\n      minutes: `${this.state.minutes}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }\n    }), members, /*#__PURE__*/React.createElement(RegularButton, {\n      text: \"Submit\",\n      onClick: this.submittedCreateTask,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    roomName: state.roomName,\n    userID: state.userID\n  };\n};\n\nlet mapDispatchToProps = dispatch => {\n  return {\n    checkAuthState: () => dispatch({\n      type: CHECK_AUTH_STATE\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateTask);","map":{"version":3,"sources":["E:/Web Dev/React/RoomEase/RoomEase-FrontEnd/src/containers/Tasks/CreateTask/CreateTask.js"],"names":["React","Component","classes","TextInput","connect","MEMBERS_OF_ROOM_URL","TASK_CREATE_URL","CHECK_AUTH_STATE","Axios","RegularButton","TaskInfoSelect","TimeInput","MemberSelect","CreateTask","state","taskName","comments","columns","daysOfTheWeek","timeOfDay","users","roomName","userID","members","error","selectedUser","timePeriod","hours","minutes","fetchAndUpdateUsersOfRoom","url","get","data","Members","setState","userName","err","message","updateRoomName","prevProps","setAndUpdate","props","taskNameChangedHandler","event","type","value","target","taskCommentsChangedHandler","daySelected","day","includes","splice","indexOf","push","changedTime","time","changedtimePeriod","addToList","user","filter","member","length","removeFromList","selectUserFromDropdown","submittedCreateTask","monthNames","createdOn","Date","getMonth","getDate","getFullYear","taskModel","taskCreationStatus","post","Result","history","goBack","console","log","componentDidMount","checkAuthState","componentDidUpdate","prevState","render","Form","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport * as classes from './createtask.module.css'\r\nimport TextInput from '../../../components/inputs/TextInput';\r\nimport { connect } from 'react-redux';\r\nimport { MEMBERS_OF_ROOM_URL, TASK_CREATE_URL } from '../../../constants/ServerRoutes';\r\nimport { CHECK_AUTH_STATE } from '../../../store/Actions/ActionConstants';\r\nimport Axios from 'axios'\r\nimport RegularButton from '../../../components/inputs/RegularButton'\r\nimport TaskInfoSelect from '../../../components/TaskInfoSelect/TaskInfoSelect';\r\nimport TimeInput from '../../../components/inputs/TimeInput';\r\nimport MemberSelect from '../../../components/inputs/MemberSelect';\r\n\r\nclass CreateTask extends Component {\r\n\r\n    state = {\r\n        taskName: \"\",\r\n        comments: \"\",\r\n        columns: {\r\n            daysOfTheWeek: [],\r\n            timeOfDay: \"\",\r\n            users: [],\r\n        },\r\n        roomName: null,\r\n        userID: null,\r\n        members: [],\r\n        error: \"\",\r\n        selectedUser: \"\",\r\n        timePeriod: \"AM\",\r\n        hours: \"\",\r\n        minutes: \"\",\r\n    }\r\n\r\n\r\n    fetchAndUpdateUsersOfRoom = async (roomName) => {\r\n        try {\r\n            let url = MEMBERS_OF_ROOM_URL + \"?roomname=\" + roomName;\r\n            let members = (await Axios.get(url)).data.Members;\r\n\r\n            this.setState({ members, selectedUser: members[0].userName })\r\n        } catch (err) {\r\n            this.setState({ error: err.message })\r\n        }\r\n    }\r\n\r\n    updateRoomName = (prevProps) => {\r\n        let setAndUpdate = (roomName) => {\r\n            this.setState({ roomName: roomName })\r\n            this.fetchAndUpdateUsersOfRoom(roomName);\r\n        }\r\n\r\n        if (this.props.roomName != null && this.state.roomName === null)\r\n            setAndUpdate(this.props.roomName);\r\n\r\n        else if (prevProps != null && (prevProps.roomName !== null && this.state.roomName === null))\r\n            setAndUpdate(prevProps.roomName);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.checkAuthState();\r\n        this.updateRoomName();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        this.updateRoomName(prevProps);\r\n\r\n        if (this.props.userID !== this.state.userID && this.state.userID === null) {\r\n            this.setState({ userID: this.props.userID })\r\n        }\r\n    }\r\n\r\n    taskNameChangedHandler = (event, type) => {\r\n        let value = event.target.value;\r\n        this.setState({ taskName: value })\r\n    }\r\n\r\n    taskCommentsChangedHandler = (event, type) => {\r\n        let value = event.target.value;\r\n        this.setState({ comments: value })\r\n    }\r\n\r\n    daySelected = (day) => {\r\n        let columns = { ...this.state.columns };\r\n        let daysOfTheWeek = [...columns.daysOfTheWeek];\r\n\r\n        if (daysOfTheWeek.includes(day)) {\r\n            daysOfTheWeek.splice(daysOfTheWeek.indexOf(day), 1);\r\n        }\r\n        else {\r\n            daysOfTheWeek.push(day);\r\n        }\r\n        columns.daysOfTheWeek = daysOfTheWeek;\r\n\r\n\r\n        this.setState({ columns })\r\n\r\n    }\r\n\r\n    changedTime = (time, type) => {\r\n        if (type === \"hours\") {\r\n            this.setState({ hours: time })\r\n        }\r\n        else {\r\n            this.setState({ minutes: time })\r\n        }\r\n    }\r\n\r\n    changedtimePeriod = (timePeriod) => {\r\n        this.setState({ timePeriod: timePeriod })\r\n    }\r\n\r\n    addToList = (userName) => {\r\n        let columns = { ...this.state.columns };\r\n        let users = [...columns.users];\r\n\r\n        let user = this.state.members.filter(member => member.userName === userName)[0];\r\n        users.push(user);\r\n\r\n        columns.users = users;\r\n\r\n        let members = [...this.state.members];\r\n        members = members.filter(member => member.userName !== userName);\r\n\r\n        let selectedUser = members.length > 0 ? members[0].userName : \"\";\r\n\r\n        this.setState({ columns, members, selectedUser });\r\n    }\r\n\r\n    removeFromList = (userName) => {\r\n        let columns = { ...this.state.columns };\r\n        let users = [...columns.users];\r\n\r\n        let user = users.filter(member => member.userName === userName)[0];\r\n\r\n        users = users.filter(member => member.userName !== userName);\r\n\r\n        columns.users = users;\r\n\r\n        let members = [...this.state.members];\r\n        members.push(user);\r\n\r\n        let selectedUser = members[0].userName;\r\n\r\n        this.setState({ columns, members, selectedUser });\r\n    }\r\n\r\n    selectUserFromDropdown = (event) => {\r\n        let selectedUser = event.target.value\r\n        this.setState({ selectedUser })\r\n    }\r\n\r\n    submittedCreateTask = async () => {\r\n        const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n        let createdOn = new Date();\r\n        createdOn = `${monthNames[createdOn.getMonth()]} ${createdOn.getDate()} ${createdOn.getFullYear()}`;\r\n        let columns = {};\r\n        columns.daysOfTheWeek = this.state.columns.daysOfTheWeek;\r\n        columns.users = this.state.columns.users;\r\n        columns.timeOfDay = `${this.state.hours}:${this.state.minutes} ${this.state.timePeriod}`\r\n\r\n        let taskModel = {\r\n            createdOn: createdOn,\r\n            taskName: this.state.taskName,\r\n            comments: this.state.comments,\r\n            columns: columns,\r\n            roomName: this.state.roomName,\r\n            userID: this.state.userID\r\n        };\r\n\r\n\r\n        let taskCreationStatus = (await Axios.post(TASK_CREATE_URL, taskModel)).data;\r\n        if (taskCreationStatus.Result === \"Success\")\r\n            this.props.history.goBack();\r\n\r\n        else\r\n            console.log(taskCreationStatus);\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        let members = null;\r\n\r\n        if (this.state.roomName) {\r\n            members = (<MemberSelect\r\n                potentialUsers={this.state.members}\r\n                addToList={this.addToList}\r\n                addedUsers={this.state.columns.users}\r\n                selectedUser={this.state.selectedUser}\r\n                selectUserFromDropdown={this.selectUserFromDropdown}\r\n                removeFromList={this.removeFromList}\r\n            ></MemberSelect>)\r\n        }\r\n\r\n\r\n        return (\r\n            <div className={classes.Form} >\r\n                <h2>Create Task</h2>\r\n                <TextInput onChange={this.taskNameChangedHandler} type=\"text\" hint=\"Task Name\" value={this.state.taskName} />\r\n                <TextInput onChange={this.taskCommentsChangedHandler} type=\"textarea\" hint=\"Comments\" value={this.state.comments} />\r\n                <TaskInfoSelect days={this.state.columns.daysOfTheWeek} daySelected={this.daySelected} />\r\n                <TimeInput\r\n                    changedTime={this.changedTime}\r\n                    timePeriod={this.state.timePeriod}\r\n                    changedtimePeriod={this.changedtimePeriod}\r\n                    hours={`${this.state.hours}`}\r\n                    minutes={`${this.state.minutes}`}\r\n                />\r\n\r\n                {members}\r\n\r\n\r\n                <RegularButton text={\"Submit\"} onClick={this.submittedCreateTask} />\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = state => {\r\n    return {\r\n        roomName: state.roomName,\r\n        userID: state.userID\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = dispatch => {\r\n    return {\r\n        checkAuthState: () => dispatch({ type: CHECK_AUTH_STATE })\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateTask);\r\n"]},"metadata":{},"sourceType":"module"}